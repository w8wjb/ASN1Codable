//
//  OID.swift
//  ASN1Codable
//
//  Created by Weston Bustraan on 12/25/20.
//

import Foundation

public struct OID : Codable, CustomStringConvertible, Equatable, Hashable {

    public static func == (lhs: OID, rhs: OID) -> Bool {
        return lhs.oid == rhs.oid
    }
    
    public let oid: String
    public let shortName: String
    public let longName: String
    public let comment: String?
    
    var stringValue: String {
        get {
            return oid
        }
    }
    
    var intValue: Int? {
        get {
            return nil
        }
    }
    
    public var description: String {
        "\(oid) \(shortName)"
    }

    
    public init?(stringValue: String) {
        return nil
    }
    
    public init?(intValue: Int) {
        return nil
    }
    
    
    public init(oid: String, shortName: String? = nil, longName: String? = nil, comment: String? = nil) {
        self.oid = oid
        self.shortName = shortName ?? ""
        self.longName = longName ?? shortName ?? ""
        self.comment = comment
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let decoded = try container.decode(OID.self)
        self.oid = decoded.oid
        self.shortName = decoded.shortName
        self.longName = decoded.longName
        self.comment = decoded.comment
        
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(oid)
    }
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(oid)
    }
    
    public static let rsadsi = OID(oid: "1.2.840.113549", shortName: "rsadsi", longName: "RSA Data Security, Inc.")
    public static let pkcs = OID(oid: "1.2.840.113549.1", shortName: "pkcs", longName: "RSA Data Security, Inc. PKCS")
    public static let MD2 = OID(oid: "1.2.840.113549.2.2", shortName: "MD2", longName: "md2")
    public static let MD5 = OID(oid: "1.2.840.113549.2.5", shortName: "MD5", longName: "md5")
    public static let RC4 = OID(oid: "1.2.840.113549.3.4", shortName: "RC4", longName: "rc4")
    public static let rsaEncryption = OID(oid: "1.2.840.113549.1.1.1", shortName: "rsaEncryption")
    public static let md2WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.2", shortName: "RSA-MD2", longName: "md2WithRSAEncryption")
    public static let md5WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.4", shortName: "RSA-MD5", longName: "md5WithRSAEncryption")
    public static let PBE_MD2_DES = OID(oid: "1.2.840.113549.1.5.1", shortName: "PBE-MD2-DES", longName: "pbeWithMD2AndDES-CBC")
    public static let PBE_MD5_DES = OID(oid: "1.2.840.113549.1.5.3", shortName: "PBE-MD5-DES", longName: "pbeWithMD5AndDES-CBC")
    public static let X500 = OID(oid: "2.5", shortName: "X500", longName: "directory services (X.500)")
    public static let X509 = OID(oid: "2.5.4", shortName: "X509")
    public static let CN = OID(oid: "2.5.4.3", shortName: "CN", longName: "commonName")
    public static let C = OID(oid: "2.5.4.6", shortName: "C", longName: "countryName")
    public static let L = OID(oid: "2.5.4.7", shortName: "L", longName: "localityName")
    public static let ST = OID(oid: "2.5.4.8", shortName: "ST", longName: "stateOrProvinceName")
    public static let O = OID(oid: "2.5.4.10", shortName: "O", longName: "organizationName")
    public static let OU = OID(oid: "2.5.4.11", shortName: "OU", longName: "organizationalUnitName")
    public static let RSA = OID(oid: "2.5.8.1.1", shortName: "RSA", longName: "rsa")
    public static let pkcs7 = OID(oid: "1.2.840.113549.1.7", shortName: "pkcs7")
    public static let pkcs7_data = OID(oid: "1.2.840.113549.1.7.1", shortName: "pkcs7-data")
    public static let pkcs7_signedData = OID(oid: "1.2.840.113549.1.7.2", shortName: "pkcs7-signedData")
    public static let pkcs7_envelopedData = OID(oid: "1.2.840.113549.1.7.3", shortName: "pkcs7-envelopedData")
    public static let pkcs7_signedAndEnvelopedData = OID(oid: "1.2.840.113549.1.7.4", shortName: "pkcs7-signedAndEnvelopedData")
    public static let pkcs7_digestData = OID(oid: "1.2.840.113549.1.7.5", shortName: "pkcs7-digestData")
    public static let pkcs7_encryptedData = OID(oid: "1.2.840.113549.1.7.6", shortName: "pkcs7-encryptedData")
    public static let pkcs3 = OID(oid: "1.2.840.113549.1.3", shortName: "pkcs3")
    public static let dhKeyAgreement = OID(oid: "1.2.840.113549.1.3.1", shortName: "dhKeyAgreement")
    public static let DES_ECB = OID(oid: "1.3.14.3.2.6", shortName: "DES-ECB", longName: "des-ecb")
    public static let DES_CFB = OID(oid: "1.3.14.3.2.9", shortName: "DES-CFB", longName: "des-cfb")
    public static let DES_CBC = OID(oid: "1.3.14.3.2.7", shortName: "DES-CBC", longName: "des-cbc")
    public static let DES_EDE = OID(oid: "1.3.14.3.2.17", shortName: "DES-EDE", longName: "des-ede")
    public static let IDEA_CBC = OID(oid: "1.3.6.1.4.1.188.7.1.1.2", shortName: "IDEA-CBC", longName: "idea-cbc")
    public static let RC2_CBC = OID(oid: "1.2.840.113549.3.2", shortName: "RC2-CBC", longName: "rc2-cbc")
    public static let SHA = OID(oid: "1.3.14.3.2.18", shortName: "SHA", longName: "sha")
    public static let shaWithRSAEncryption = OID(oid: "1.3.14.3.2.15", shortName: "RSA-SHA", longName: "shaWithRSAEncryption")
    public static let DES_EDE3_CBC = OID(oid: "1.2.840.113549.3.7", shortName: "DES-EDE3-CBC", longName: "des-ede3-cbc")
    public static let DES_OFB = OID(oid: "1.3.14.3.2.8", shortName: "DES-OFB", longName: "des-ofb")
    public static let pkcs9 = OID(oid: "1.2.840.113549.1.9", shortName: "pkcs9")
    public static let emailAddress = OID(oid: "1.2.840.113549.1.9.1", shortName: "emailAddress")
    public static let unstructuredName = OID(oid: "1.2.840.113549.1.9.2", shortName: "unstructuredName")
    public static let contentType = OID(oid: "1.2.840.113549.1.9.3", shortName: "contentType")
    public static let messageDigest = OID(oid: "1.2.840.113549.1.9.4", shortName: "messageDigest")
    public static let signingTime = OID(oid: "1.2.840.113549.1.9.5", shortName: "signingTime")
    public static let countersignature = OID(oid: "1.2.840.113549.1.9.6", shortName: "countersignature")
    public static let challengePassword = OID(oid: "1.2.840.113549.1.9.7", shortName: "challengePassword")
    public static let unstructuredAddress = OID(oid: "1.2.840.113549.1.9.8", shortName: "unstructuredAddress")
    public static let extendedCertificateAttributes = OID(oid: "1.2.840.113549.1.9.9", shortName: "extendedCertificateAttributes")
    public static let Netscape = OID(oid: "2.16.840.1.113730", shortName: "Netscape", longName: "Netscape Communications Corp.")
    public static let nsCertExt = OID(oid: "2.16.840.1.113730.1", shortName: "nsCertExt", longName: "Netscape Certificate Extension")
    public static let nsDataType = OID(oid: "2.16.840.1.113730.2", shortName: "nsDataType", longName: "Netscape Data Type")
    public static let SHA1 = OID(oid: "1.3.14.3.2.26", shortName: "SHA1", longName: "sha1")
    public static let sha1WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.5", shortName: "RSA-SHA1", longName: "sha1WithRSAEncryption")
    public static let dsaWithSHA = OID(oid: "1.3.14.3.2.13", shortName: "DSA-SHA", longName: "dsaWithSHA")
    public static let DSA_old = OID(oid: "1.3.14.3.2.12", shortName: "DSA-old", longName: "dsaEncryption-old")
    public static let PBE_SHA1_RC2_64 = OID(oid: "1.2.840.113549.1.5.11", shortName: "PBE-SHA1-RC2-64", longName: "pbeWithSHA1AndRC2-CBC")
    public static let PBKDF2 = OID(oid: "1.2.840.113549.1.5.12", shortName: "PBKDF2")
    public static let DSA_SHA1_old = OID(oid: "1.3.14.3.2.27", shortName: "DSA-SHA1-old", longName: "dsaWithSHA1-old")
    public static let nsCertType = OID(oid: "2.16.840.1.113730.1.1", shortName: "nsCertType", longName: "Netscape Cert Type")
    public static let nsBaseUrl = OID(oid: "2.16.840.1.113730.1.2", shortName: "nsBaseUrl", longName: "Netscape Base Url")
    public static let nsRevocationUrl = OID(oid: "2.16.840.1.113730.1.3", shortName: "nsRevocationUrl", longName: "Netscape Revocation Url")
    public static let nsCaRevocationUrl = OID(oid: "2.16.840.1.113730.1.4", shortName: "nsCaRevocationUrl", longName: "Netscape CA Revocation Url")
    public static let nsRenewalUrl = OID(oid: "2.16.840.1.113730.1.7", shortName: "nsRenewalUrl", longName: "Netscape Renewal Url")
    public static let nsCaPolicyUrl = OID(oid: "2.16.840.1.113730.1.8", shortName: "nsCaPolicyUrl", longName: "Netscape CA Policy Url")
    public static let nsSslServerName = OID(oid: "2.16.840.1.113730.1.12", shortName: "nsSslServerName", longName: "Netscape SSL Server Name")
    public static let nsComment = OID(oid: "2.16.840.1.113730.1.13", shortName: "nsComment", longName: "Netscape Comment")
    public static let nsCertSequence = OID(oid: "2.16.840.1.113730.2.5", shortName: "nsCertSequence", longName: "Netscape Certificate Sequence")
    public static let id_ce = OID(oid: "2.5.29", shortName: "id-ce")
    public static let subjectKeyIdentifier = OID(oid: "2.5.29.14", shortName: "subjectKeyIdentifier", longName: "X509v3 Subject Key Identifier")
    public static let keyUsage = OID(oid: "2.5.29.15", shortName: "keyUsage", longName: "X509v3 Key Usage")
    public static let privateKeyUsagePeriod = OID(oid: "2.5.29.16", shortName: "privateKeyUsagePeriod", longName: "X509v3 Private Key Usage Period")
    public static let subjectAltName = OID(oid: "2.5.29.17", shortName: "subjectAltName", longName: "X509v3 Subject Alternative Name")
    public static let issuerAltName = OID(oid: "2.5.29.18", shortName: "issuerAltName", longName: "X509v3 Issuer Alternative Name")
    public static let basicConstraints = OID(oid: "2.5.29.19", shortName: "basicConstraints", longName: "X509v3 Basic Constraints")
    public static let crlNumber = OID(oid: "2.5.29.20", shortName: "crlNumber", longName: "X509v3 CRL Number")
    public static let certificatePolicies = OID(oid: "2.5.29.32", shortName: "certificatePolicies", longName: "X509v3 Certificate Policies")
    public static let authorityKeyIdentifier = OID(oid: "2.5.29.35", shortName: "authorityKeyIdentifier", longName: "X509v3 Authority Key Identifier")
    public static let BF_CBC = OID(oid: "1.3.6.1.4.1.3029.1.2", shortName: "BF-CBC", longName: "bf-cbc")
    public static let MDC2 = OID(oid: "2.5.8.3.101", shortName: "MDC2", longName: "mdc2")
    public static let RSA_MDC2 = OID(oid: "2.5.8.3.100", shortName: "RSA-MDC2", longName: "mdc2WithRSA")
    public static let GN = OID(oid: "2.5.4.42", shortName: "GN", longName: "givenName")
    public static let SN = OID(oid: "2.5.4.4", shortName: "SN", longName: "surname")
    public static let initials = OID(oid: "2.5.4.43", shortName: "initials")
    public static let uid = OID(oid: "0.9.2342.19200300.100.1.44", shortName: "uid", longName: "uniqueIdentifier")
    public static let crlDistributionPoints = OID(oid: "2.5.29.31", shortName: "crlDistributionPoints", longName: "X509v3 CRL Distribution Points")
    public static let md5WithRSA = OID(oid: "1.3.14.3.2.3", shortName: "RSA-NP-MD5", longName: "md5WithRSA")
    public static let serialNumber = OID(oid: "2.5.4.5", shortName: "serialNumber")
    public static let title = OID(oid: "2.5.4.12", shortName: "title")
    public static let description = OID(oid: "2.5.4.13", shortName: "description")
    public static let CAST5_CBC = OID(oid: "1.2.840.113533.7.66.10", shortName: "CAST5-CBC", longName: "cast5-cbc")
    public static let pbeWithMD5AndCast5CBC = OID(oid: "1.2.840.113533.7.66.12", shortName: "pbeWithMD5AndCast5CBC")
    public static let dsaWithSHA1 = OID(oid: "1.2.840.10040.4.3", shortName: "DSA-SHA1", longName: "dsaWithSHA1")
    public static let sha1WithRSA = OID(oid: "1.3.14.3.2.29", shortName: "RSA-SHA1-2", longName: "sha1WithRSA")
    public static let DSA = OID(oid: "1.2.840.10040.4.1", shortName: "DSA", longName: "dsaEncryption")
    public static let RIPEMD160 = OID(oid: "1.3.36.3.2.1", shortName: "RIPEMD160", longName: "ripemd160")
    public static let RSA_RIPEMD160 = OID(oid: "1.3.36.3.3.1.2", shortName: "RSA-RIPEMD160", longName: "ripemd160WithRSA")
    public static let RC5_CBC = OID(oid: "1.2.840.113549.3.8", shortName: "RC5-CBC", longName: "rc5-cbc")
    public static let ZLIB = OID(oid: "1.2.840.113549.1.9.16.3.8", shortName: "ZLIB", longName: "zlib compression")
    public static let extendedKeyUsage = OID(oid: "2.5.29.37", shortName: "extendedKeyUsage", longName: "X509v3 Extended Key Usage")
    public static let PKIX = OID(oid: "1.3.6.1.5.5.7", shortName: "PKIX")
    public static let id_kp = OID(oid: "1.3.6.1.5.5.7.3", shortName: "id-kp")
    public static let serverAuth = OID(oid: "1.3.6.1.5.5.7.3.1", shortName: "serverAuth", longName: "TLS Web Server Authentication")
    public static let clientAuth = OID(oid: "1.3.6.1.5.5.7.3.2", shortName: "clientAuth", longName: "TLS Web Client Authentication")
    public static let codeSigning = OID(oid: "1.3.6.1.5.5.7.3.3", shortName: "codeSigning", longName: "Code Signing")
    public static let emailProtection = OID(oid: "1.3.6.1.5.5.7.3.4", shortName: "emailProtection", longName: "E-mail Protection")
    public static let timeStamping = OID(oid: "1.3.6.1.5.5.7.3.8", shortName: "timeStamping", longName: "Time Stamping")
    public static let msCodeInd = OID(oid: "1.3.6.1.4.1.311.2.1.21", shortName: "msCodeInd", longName: "Microsoft Individual Code Signing")
    public static let msCodeCom = OID(oid: "1.3.6.1.4.1.311.2.1.22", shortName: "msCodeCom", longName: "Microsoft Commercial Code Signing")
    public static let msCTLSign = OID(oid: "1.3.6.1.4.1.311.10.3.1", shortName: "msCTLSign", longName: "Microsoft Trust List Signing")
    public static let msSGC = OID(oid: "1.3.6.1.4.1.311.10.3.3", shortName: "msSGC", longName: "Microsoft Server Gated Crypto")
    public static let msEFS = OID(oid: "1.3.6.1.4.1.311.10.3.4", shortName: "msEFS", longName: "Microsoft Encrypted File System")
    public static let nsSGC = OID(oid: "2.16.840.1.113730.4.1", shortName: "nsSGC", longName: "Netscape Server Gated Crypto")
    public static let deltaCRL = OID(oid: "2.5.29.27", shortName: "deltaCRL", longName: "X509v3 Delta CRL Indicator")
    public static let CRLReason = OID(oid: "2.5.29.21", shortName: "CRLReason", longName: "X509v3 CRL Reason Code")
    public static let invalidityDate = OID(oid: "2.5.29.24", shortName: "invalidityDate", longName: "Invalidity Date")
    public static let SXNetID = OID(oid: "1.3.101.1.4.1", shortName: "SXNetID", longName: "Strong Extranet ID")
    public static let pbeWithSHA1And128BitRC4 = OID(oid: "1.2.840.113549.1.12.1.1", shortName: "PBE-SHA1-RC4-128", longName: "pbeWithSHA1And128BitRC4")
    public static let pbeWithSHA1And40BitRC4 = OID(oid: "1.2.840.113549.1.12.1.2", shortName: "PBE-SHA1-RC4-40", longName: "pbeWithSHA1And40BitRC4")
    public static let pbeWithSHA1And3_KeyTripleDES_CBC = OID(oid: "1.2.840.113549.1.12.1.3", shortName: "PBE-SHA1-3DES", longName: "pbeWithSHA1And3-KeyTripleDES-CBC")
    public static let pbeWithSHA1And2_KeyTripleDES_CBC = OID(oid: "1.2.840.113549.1.12.1.4", shortName: "PBE-SHA1-2DES", longName: "pbeWithSHA1And2-KeyTripleDES-CBC")
    public static let pbeWithSHA1And128BitRC2_CBC = OID(oid: "1.2.840.113549.1.12.1.5", shortName: "PBE-SHA1-RC2-128", longName: "pbeWithSHA1And128BitRC2-CBC")
    public static let pbeWithSHA1And40BitRC2_CBC = OID(oid: "1.2.840.113549.1.12.1.6", shortName: "PBE-SHA1-RC2-40", longName: "pbeWithSHA1And40BitRC2-CBC")
    public static let keyBag = OID(oid: "1.2.840.113549.1.12.10.1.1", shortName: "keyBag")
    public static let pkcs8ShroudedKeyBag = OID(oid: "1.2.840.113549.1.12.10.1.2", shortName: "pkcs8ShroudedKeyBag")
    public static let certBag = OID(oid: "1.2.840.113549.1.12.10.1.3", shortName: "certBag")
    public static let crlBag = OID(oid: "1.2.840.113549.1.12.10.1.4", shortName: "crlBag")
    public static let secretBag = OID(oid: "1.2.840.113549.1.12.10.1.5", shortName: "secretBag")
    public static let safeContentsBag = OID(oid: "1.2.840.113549.1.12.10.1.6", shortName: "safeContentsBag")
    public static let friendlyName = OID(oid: "1.2.840.113549.1.9.20", shortName: "friendlyName")
    public static let localKeyID = OID(oid: "1.2.840.113549.1.9.21", shortName: "localKeyID")
    public static let x509Certificate = OID(oid: "1.2.840.113549.1.9.22.1", shortName: "x509Certificate")
    public static let sdsiCertificate = OID(oid: "1.2.840.113549.1.9.22.2", shortName: "sdsiCertificate")
    public static let x509Crl = OID(oid: "1.2.840.113549.1.9.23.1", shortName: "x509Crl")
    public static let PBES2 = OID(oid: "1.2.840.113549.1.5.13", shortName: "PBES2")
    public static let PBMAC1 = OID(oid: "1.2.840.113549.1.5.14", shortName: "PBMAC1")
    public static let hmacWithSHA1 = OID(oid: "1.2.840.113549.2.7", shortName: "hmacWithSHA1")
    public static let id_qt_cps = OID(oid: "1.3.6.1.5.5.7.2.1", shortName: "id-qt-cps", longName: "Policy Qualifier CPS")
    public static let id_qt_unotice = OID(oid: "1.3.6.1.5.5.7.2.2", shortName: "id-qt-unotice", longName: "Policy Qualifier User Notice")
    public static let SMIME_CAPS = OID(oid: "1.2.840.113549.1.9.15", shortName: "SMIME-CAPS", longName: "S/MIME Capabilities")
    public static let PBE_MD2_RC2_64 = OID(oid: "1.2.840.113549.1.5.4", shortName: "PBE-MD2-RC2-64", longName: "pbeWithMD2AndRC2-CBC")
    public static let PBE_MD5_RC2_64 = OID(oid: "1.2.840.113549.1.5.6", shortName: "PBE-MD5-RC2-64", longName: "pbeWithMD5AndRC2-CBC")
    public static let PBE_SHA1_DES = OID(oid: "1.2.840.113549.1.5.10", shortName: "PBE-SHA1-DES", longName: "pbeWithSHA1AndDES-CBC")
    public static let msExtReq = OID(oid: "1.3.6.1.4.1.311.2.1.14", shortName: "msExtReq", longName: "Microsoft Extension Request")
    public static let extReq = OID(oid: "1.2.840.113549.1.9.14", shortName: "extReq", longName: "Extension Request")
    public static let name = OID(oid: "2.5.4.41", shortName: "name")
    public static let dnQualifier = OID(oid: "2.5.4.46", shortName: "dnQualifier")
    public static let id_pe = OID(oid: "1.3.6.1.5.5.7.1", shortName: "id-pe")
    public static let id_ad = OID(oid: "1.3.6.1.5.5.7.48", shortName: "id-ad")
    public static let authorityInfoAccess = OID(oid: "1.3.6.1.5.5.7.1.1", shortName: "authorityInfoAccess", longName: "Authority Information Access")
    public static let OCSP = OID(oid: "1.3.6.1.5.5.7.48.1", shortName: "OCSP")
    public static let caIssuers = OID(oid: "1.3.6.1.5.5.7.48.2", shortName: "caIssuers", longName: "CA Issuers")
    public static let OCSPSigning = OID(oid: "1.3.6.1.5.5.7.3.9", shortName: "OCSPSigning", longName: "OCSP Signing")
    public static let member_body = OID(oid: "1.2", shortName: "member-body", longName: "ISO Member Body")
    public static let ISO_US = OID(oid: "1.2.840", shortName: "ISO-US", longName: "ISO US Member Body")
    public static let X9_57 = OID(oid: "1.2.840.10040", shortName: "X9-57", longName: "X9.57")
    public static let X9cm = OID(oid: "1.2.840.10040.4", shortName: "X9cm", longName: "X9.57 CM ?")
    public static let pkcs1 = OID(oid: "1.2.840.113549.1.1", shortName: "pkcs1")
    public static let pkcs5 = OID(oid: "1.2.840.113549.1.5", shortName: "pkcs5")
    public static let SMIME = OID(oid: "1.2.840.113549.1.9.16", shortName: "SMIME", longName: "S/MIME")
    public static let id_smime_mod = OID(oid: "1.2.840.113549.1.9.16.0", shortName: "id-smime-mod")
    public static let id_smime_ct = OID(oid: "1.2.840.113549.1.9.16.1", shortName: "id-smime-ct")
    public static let id_smime_aa = OID(oid: "1.2.840.113549.1.9.16.2", shortName: "id-smime-aa")
    public static let id_smime_alg = OID(oid: "1.2.840.113549.1.9.16.3", shortName: "id-smime-alg")
    public static let id_smime_cd = OID(oid: "1.2.840.113549.1.9.16.4", shortName: "id-smime-cd")
    public static let id_smime_spq = OID(oid: "1.2.840.113549.1.9.16.5", shortName: "id-smime-spq")
    public static let id_smime_cti = OID(oid: "1.2.840.113549.1.9.16.6", shortName: "id-smime-cti")
    public static let id_smime_mod_cms = OID(oid: "1.2.840.113549.1.9.16.0.1", shortName: "id-smime-mod-cms")
    public static let id_smime_mod_ess = OID(oid: "1.2.840.113549.1.9.16.0.2", shortName: "id-smime-mod-ess")
    public static let id_smime_mod_oid = OID(oid: "1.2.840.113549.1.9.16.0.3", shortName: "id-smime-mod-oid")
    public static let id_smime_mod_msg_v3 = OID(oid: "1.2.840.113549.1.9.16.0.4", shortName: "id-smime-mod-msg-v3")
    public static let id_smime_mod_ets_eSignature_88 = OID(oid: "1.2.840.113549.1.9.16.0.5", shortName: "id-smime-mod-ets-eSignature-88")
    public static let id_smime_mod_ets_eSignature_97 = OID(oid: "1.2.840.113549.1.9.16.0.6", shortName: "id-smime-mod-ets-eSignature-97")
    public static let id_smime_mod_ets_eSigPolicy_88 = OID(oid: "1.2.840.113549.1.9.16.0.7", shortName: "id-smime-mod-ets-eSigPolicy-88")
    public static let id_smime_mod_ets_eSigPolicy_97 = OID(oid: "1.2.840.113549.1.9.16.0.8", shortName: "id-smime-mod-ets-eSigPolicy-97")
    public static let id_smime_ct_receipt = OID(oid: "1.2.840.113549.1.9.16.1.1", shortName: "id-smime-ct-receipt")
    public static let id_smime_ct_authData = OID(oid: "1.2.840.113549.1.9.16.1.2", shortName: "id-smime-ct-authData")
    public static let id_smime_ct_publishCert = OID(oid: "1.2.840.113549.1.9.16.1.3", shortName: "id-smime-ct-publishCert")
    public static let id_smime_ct_TSTInfo = OID(oid: "1.2.840.113549.1.9.16.1.4", shortName: "id-smime-ct-TSTInfo")
    public static let id_smime_ct_TDTInfo = OID(oid: "1.2.840.113549.1.9.16.1.5", shortName: "id-smime-ct-TDTInfo")
    public static let id_smime_ct_contentInfo = OID(oid: "1.2.840.113549.1.9.16.1.6", shortName: "id-smime-ct-contentInfo")
    public static let id_smime_ct_DVCSRequestData = OID(oid: "1.2.840.113549.1.9.16.1.7", shortName: "id-smime-ct-DVCSRequestData")
    public static let id_smime_ct_DVCSResponseData = OID(oid: "1.2.840.113549.1.9.16.1.8", shortName: "id-smime-ct-DVCSResponseData")
    public static let id_smime_aa_receiptRequest = OID(oid: "1.2.840.113549.1.9.16.2.1", shortName: "id-smime-aa-receiptRequest")
    public static let id_smime_aa_securityLabel = OID(oid: "1.2.840.113549.1.9.16.2.2", shortName: "id-smime-aa-securityLabel")
    public static let id_smime_aa_mlExpandHistory = OID(oid: "1.2.840.113549.1.9.16.2.3", shortName: "id-smime-aa-mlExpandHistory")
    public static let id_smime_aa_contentHint = OID(oid: "1.2.840.113549.1.9.16.2.4", shortName: "id-smime-aa-contentHint")
    public static let id_smime_aa_msgSigDigest = OID(oid: "1.2.840.113549.1.9.16.2.5", shortName: "id-smime-aa-msgSigDigest")
    public static let id_smime_aa_encapContentType = OID(oid: "1.2.840.113549.1.9.16.2.6", shortName: "id-smime-aa-encapContentType")
    public static let id_smime_aa_contentIdentifier = OID(oid: "1.2.840.113549.1.9.16.2.7", shortName: "id-smime-aa-contentIdentifier")
    public static let id_smime_aa_macValue = OID(oid: "1.2.840.113549.1.9.16.2.8", shortName: "id-smime-aa-macValue")
    public static let id_smime_aa_equivalentLabels = OID(oid: "1.2.840.113549.1.9.16.2.9", shortName: "id-smime-aa-equivalentLabels")
    public static let id_smime_aa_contentReference = OID(oid: "1.2.840.113549.1.9.16.2.10", shortName: "id-smime-aa-contentReference")
    public static let id_smime_aa_encrypKeyPref = OID(oid: "1.2.840.113549.1.9.16.2.11", shortName: "id-smime-aa-encrypKeyPref")
    public static let id_smime_aa_signingCertificate = OID(oid: "1.2.840.113549.1.9.16.2.12", shortName: "id-smime-aa-signingCertificate")
    public static let id_smime_aa_smimeEncryptCerts = OID(oid: "1.2.840.113549.1.9.16.2.13", shortName: "id-smime-aa-smimeEncryptCerts")
    public static let id_smime_aa_timeStampToken = OID(oid: "1.2.840.113549.1.9.16.2.14", shortName: "id-smime-aa-timeStampToken")
    public static let id_smime_aa_ets_sigPolicyId = OID(oid: "1.2.840.113549.1.9.16.2.15", shortName: "id-smime-aa-ets-sigPolicyId")
    public static let id_smime_aa_ets_commitmentType = OID(oid: "1.2.840.113549.1.9.16.2.16", shortName: "id-smime-aa-ets-commitmentType")
    public static let id_smime_aa_ets_signerLocation = OID(oid: "1.2.840.113549.1.9.16.2.17", shortName: "id-smime-aa-ets-signerLocation")
    public static let id_smime_aa_ets_signerAttr = OID(oid: "1.2.840.113549.1.9.16.2.18", shortName: "id-smime-aa-ets-signerAttr")
    public static let id_smime_aa_ets_otherSigCert = OID(oid: "1.2.840.113549.1.9.16.2.19", shortName: "id-smime-aa-ets-otherSigCert")
    public static let id_smime_aa_ets_contentTimestamp = OID(oid: "1.2.840.113549.1.9.16.2.20", shortName: "id-smime-aa-ets-contentTimestamp")
    public static let id_smime_aa_ets_CertificateRefs = OID(oid: "1.2.840.113549.1.9.16.2.21", shortName: "id-smime-aa-ets-CertificateRefs")
    public static let id_smime_aa_ets_RevocationRefs = OID(oid: "1.2.840.113549.1.9.16.2.22", shortName: "id-smime-aa-ets-RevocationRefs")
    public static let id_smime_aa_ets_certValues = OID(oid: "1.2.840.113549.1.9.16.2.23", shortName: "id-smime-aa-ets-certValues")
    public static let id_smime_aa_ets_revocationValues = OID(oid: "1.2.840.113549.1.9.16.2.24", shortName: "id-smime-aa-ets-revocationValues")
    public static let id_smime_aa_ets_escTimeStamp = OID(oid: "1.2.840.113549.1.9.16.2.25", shortName: "id-smime-aa-ets-escTimeStamp")
    public static let id_smime_aa_ets_certCRLTimestamp = OID(oid: "1.2.840.113549.1.9.16.2.26", shortName: "id-smime-aa-ets-certCRLTimestamp")
    public static let id_smime_aa_ets_archiveTimeStamp = OID(oid: "1.2.840.113549.1.9.16.2.27", shortName: "id-smime-aa-ets-archiveTimeStamp")
    public static let id_smime_aa_signatureType = OID(oid: "1.2.840.113549.1.9.16.2.28", shortName: "id-smime-aa-signatureType")
    public static let id_smime_aa_dvcs_dvc = OID(oid: "1.2.840.113549.1.9.16.2.29", shortName: "id-smime-aa-dvcs-dvc")
    public static let id_smime_alg_ESDHwith3DES = OID(oid: "1.2.840.113549.1.9.16.3.1", shortName: "id-smime-alg-ESDHwith3DES")
    public static let id_smime_alg_ESDHwithRC2 = OID(oid: "1.2.840.113549.1.9.16.3.2", shortName: "id-smime-alg-ESDHwithRC2")
    public static let id_smime_alg_3DESwrap = OID(oid: "1.2.840.113549.1.9.16.3.3", shortName: "id-smime-alg-3DESwrap")
    public static let id_smime_alg_RC2wrap = OID(oid: "1.2.840.113549.1.9.16.3.4", shortName: "id-smime-alg-RC2wrap")
    public static let id_smime_alg_ESDH = OID(oid: "1.2.840.113549.1.9.16.3.5", shortName: "id-smime-alg-ESDH")
    public static let id_smime_alg_CMS3DESwrap = OID(oid: "1.2.840.113549.1.9.16.3.6", shortName: "id-smime-alg-CMS3DESwrap")
    public static let id_smime_alg_CMSRC2wrap = OID(oid: "1.2.840.113549.1.9.16.3.7", shortName: "id-smime-alg-CMSRC2wrap")
    public static let id_smime_cd_ldap = OID(oid: "1.2.840.113549.1.9.16.4.1", shortName: "id-smime-cd-ldap")
    public static let id_smime_spq_ets_sqt_uri = OID(oid: "1.2.840.113549.1.9.16.5.1", shortName: "id-smime-spq-ets-sqt-uri")
    public static let id_smime_spq_ets_sqt_unotice = OID(oid: "1.2.840.113549.1.9.16.5.2", shortName: "id-smime-spq-ets-sqt-unotice")
    public static let id_smime_cti_ets_proofOfOrigin = OID(oid: "1.2.840.113549.1.9.16.6.1", shortName: "id-smime-cti-ets-proofOfOrigin")
    public static let id_smime_cti_ets_proofOfReceipt = OID(oid: "1.2.840.113549.1.9.16.6.2", shortName: "id-smime-cti-ets-proofOfReceipt")
    public static let id_smime_cti_ets_proofOfDelivery = OID(oid: "1.2.840.113549.1.9.16.6.3", shortName: "id-smime-cti-ets-proofOfDelivery")
    public static let id_smime_cti_ets_proofOfSender = OID(oid: "1.2.840.113549.1.9.16.6.4", shortName: "id-smime-cti-ets-proofOfSender")
    public static let id_smime_cti_ets_proofOfApproval = OID(oid: "1.2.840.113549.1.9.16.6.5", shortName: "id-smime-cti-ets-proofOfApproval")
    public static let id_smime_cti_ets_proofOfCreation = OID(oid: "1.2.840.113549.1.9.16.6.6", shortName: "id-smime-cti-ets-proofOfCreation")
    public static let MD4 = OID(oid: "1.2.840.113549.2.4", shortName: "MD4", longName: "md4")
    public static let id_pkix_mod = OID(oid: "1.3.6.1.5.5.7.0", shortName: "id-pkix-mod")
    public static let id_qt = OID(oid: "1.3.6.1.5.5.7.2", shortName: "id-qt")
    public static let id_it = OID(oid: "1.3.6.1.5.5.7.4", shortName: "id-it")
    public static let id_pkip = OID(oid: "1.3.6.1.5.5.7.5", shortName: "id-pkip")
    public static let id_alg = OID(oid: "1.3.6.1.5.5.7.6", shortName: "id-alg")
    public static let id_cmc = OID(oid: "1.3.6.1.5.5.7.7", shortName: "id-cmc")
    public static let id_on = OID(oid: "1.3.6.1.5.5.7.8", shortName: "id-on")
    public static let id_pda = OID(oid: "1.3.6.1.5.5.7.9", shortName: "id-pda")
    public static let id_aca = OID(oid: "1.3.6.1.5.5.7.10", shortName: "id-aca")
    public static let id_qcs = OID(oid: "1.3.6.1.5.5.7.11", shortName: "id-qcs")
    public static let id_cct = OID(oid: "1.3.6.1.5.5.7.12", shortName: "id-cct")
    public static let id_pkix1_explicit_88 = OID(oid: "1.3.6.1.5.5.7.0.1", shortName: "id-pkix1-explicit-88")
    public static let id_pkix1_implicit_88 = OID(oid: "1.3.6.1.5.5.7.0.2", shortName: "id-pkix1-implicit-88")
    public static let id_pkix1_explicit_93 = OID(oid: "1.3.6.1.5.5.7.0.3", shortName: "id-pkix1-explicit-93")
    public static let id_pkix1_implicit_93 = OID(oid: "1.3.6.1.5.5.7.0.4", shortName: "id-pkix1-implicit-93")
    public static let id_mod_crmf = OID(oid: "1.3.6.1.5.5.7.0.5", shortName: "id-mod-crmf")
    public static let id_mod_cmc = OID(oid: "1.3.6.1.5.5.7.0.6", shortName: "id-mod-cmc")
    public static let id_mod_kea_profile_88 = OID(oid: "1.3.6.1.5.5.7.0.7", shortName: "id-mod-kea-profile-88")
    public static let id_mod_kea_profile_93 = OID(oid: "1.3.6.1.5.5.7.0.8", shortName: "id-mod-kea-profile-93")
    public static let id_mod_cmp = OID(oid: "1.3.6.1.5.5.7.0.9", shortName: "id-mod-cmp")
    public static let id_mod_qualified_cert_88 = OID(oid: "1.3.6.1.5.5.7.0.10", shortName: "id-mod-qualified-cert-88")
    public static let id_mod_qualified_cert_93 = OID(oid: "1.3.6.1.5.5.7.0.11", shortName: "id-mod-qualified-cert-93")
    public static let id_mod_attribute_cert = OID(oid: "1.3.6.1.5.5.7.0.12", shortName: "id-mod-attribute-cert")
    public static let id_mod_timestamp_protocol = OID(oid: "1.3.6.1.5.5.7.0.13", shortName: "id-mod-timestamp-protocol")
    public static let id_mod_ocsp = OID(oid: "1.3.6.1.5.5.7.0.14", shortName: "id-mod-ocsp")
    public static let id_mod_dvcs = OID(oid: "1.3.6.1.5.5.7.0.15", shortName: "id-mod-dvcs")
    public static let id_mod_cmp2000 = OID(oid: "1.3.6.1.5.5.7.0.16", shortName: "id-mod-cmp2000")
    public static let biometricInfo = OID(oid: "1.3.6.1.5.5.7.1.2", shortName: "biometricInfo", longName: "Biometric Info")
    public static let qcStatements = OID(oid: "1.3.6.1.5.5.7.1.3", shortName: "qcStatements")
    public static let ac_auditEntity = OID(oid: "1.3.6.1.5.5.7.1.4", shortName: "ac-auditEntity")
    public static let ac_targeting = OID(oid: "1.3.6.1.5.5.7.1.5", shortName: "ac-targeting")
    public static let aaControls = OID(oid: "1.3.6.1.5.5.7.1.6", shortName: "aaControls")
    public static let sbgp_ipAddrBlock = OID(oid: "1.3.6.1.5.5.7.1.7", shortName: "sbgp-ipAddrBlock")
    public static let sbgp_autonomousSysNum = OID(oid: "1.3.6.1.5.5.7.1.8", shortName: "sbgp-autonomousSysNum")
    public static let sbgp_routerIdentifier = OID(oid: "1.3.6.1.5.5.7.1.9", shortName: "sbgp-routerIdentifier")
    public static let textNotice = OID(oid: "1.3.6.1.5.5.7.2.3", shortName: "textNotice")
    public static let ipsecEndSystem = OID(oid: "1.3.6.1.5.5.7.3.5", shortName: "ipsecEndSystem", longName: "IPSec End System")
    public static let ipsecTunnel = OID(oid: "1.3.6.1.5.5.7.3.6", shortName: "ipsecTunnel", longName: "IPSec Tunnel")
    public static let ipsecUser = OID(oid: "1.3.6.1.5.5.7.3.7", shortName: "ipsecUser", longName: "IPSec User")
    public static let DVCS = OID(oid: "1.3.6.1.5.5.7.3.10", shortName: "DVCS", longName: "dvcs")
    public static let id_it_caProtEncCert = OID(oid: "1.3.6.1.5.5.7.4.1", shortName: "id-it-caProtEncCert")
    public static let id_it_signKeyPairTypes = OID(oid: "1.3.6.1.5.5.7.4.2", shortName: "id-it-signKeyPairTypes")
    public static let id_it_encKeyPairTypes = OID(oid: "1.3.6.1.5.5.7.4.3", shortName: "id-it-encKeyPairTypes")
    public static let id_it_preferredSymmAlg = OID(oid: "1.3.6.1.5.5.7.4.4", shortName: "id-it-preferredSymmAlg")
    public static let id_it_caKeyUpdateInfo = OID(oid: "1.3.6.1.5.5.7.4.5", shortName: "id-it-caKeyUpdateInfo")
    public static let id_it_currentCRL = OID(oid: "1.3.6.1.5.5.7.4.6", shortName: "id-it-currentCRL")
    public static let id_it_unsupportedOIDs = OID(oid: "1.3.6.1.5.5.7.4.7", shortName: "id-it-unsupportedOIDs")
    public static let id_it_subscriptionRequest = OID(oid: "1.3.6.1.5.5.7.4.8", shortName: "id-it-subscriptionRequest")
    public static let id_it_subscriptionResponse = OID(oid: "1.3.6.1.5.5.7.4.9", shortName: "id-it-subscriptionResponse")
    public static let id_it_keyPairParamReq = OID(oid: "1.3.6.1.5.5.7.4.10", shortName: "id-it-keyPairParamReq")
    public static let id_it_keyPairParamRep = OID(oid: "1.3.6.1.5.5.7.4.11", shortName: "id-it-keyPairParamRep")
    public static let id_it_revPassphrase = OID(oid: "1.3.6.1.5.5.7.4.12", shortName: "id-it-revPassphrase")
    public static let id_it_implicitConfirm = OID(oid: "1.3.6.1.5.5.7.4.13", shortName: "id-it-implicitConfirm")
    public static let id_it_confirmWaitTime = OID(oid: "1.3.6.1.5.5.7.4.14", shortName: "id-it-confirmWaitTime")
    public static let id_it_origPKIMessage = OID(oid: "1.3.6.1.5.5.7.4.15", shortName: "id-it-origPKIMessage")
    public static let id_regCtrl = OID(oid: "1.3.6.1.5.5.7.5.1", shortName: "id-regCtrl")
    public static let id_regInfo = OID(oid: "1.3.6.1.5.5.7.5.2", shortName: "id-regInfo")
    public static let id_regCtrl_regToken = OID(oid: "1.3.6.1.5.5.7.5.1.1", shortName: "id-regCtrl-regToken")
    public static let id_regCtrl_authenticator = OID(oid: "1.3.6.1.5.5.7.5.1.2", shortName: "id-regCtrl-authenticator")
    public static let id_regCtrl_pkiPublicationInfo = OID(oid: "1.3.6.1.5.5.7.5.1.3", shortName: "id-regCtrl-pkiPublicationInfo")
    public static let id_regCtrl_pkiArchiveOptions = OID(oid: "1.3.6.1.5.5.7.5.1.4", shortName: "id-regCtrl-pkiArchiveOptions")
    public static let id_regCtrl_oldCertID = OID(oid: "1.3.6.1.5.5.7.5.1.5", shortName: "id-regCtrl-oldCertID")
    public static let id_regCtrl_protocolEncrKey = OID(oid: "1.3.6.1.5.5.7.5.1.6", shortName: "id-regCtrl-protocolEncrKey")
    public static let id_regInfo_utf8Pairs = OID(oid: "1.3.6.1.5.5.7.5.2.1", shortName: "id-regInfo-utf8Pairs")
    public static let id_regInfo_certReq = OID(oid: "1.3.6.1.5.5.7.5.2.2", shortName: "id-regInfo-certReq")
    public static let id_alg_des40 = OID(oid: "1.3.6.1.5.5.7.6.1", shortName: "id-alg-des40")
    public static let id_alg_noSignature = OID(oid: "1.3.6.1.5.5.7.6.2", shortName: "id-alg-noSignature")
    public static let id_alg_dh_sig_hmac_sha1 = OID(oid: "1.3.6.1.5.5.7.6.3", shortName: "id-alg-dh-sig-hmac-sha1")
    public static let id_alg_dh_pop = OID(oid: "1.3.6.1.5.5.7.6.4", shortName: "id-alg-dh-pop")
    public static let id_cmc_statusInfo = OID(oid: "1.3.6.1.5.5.7.7.1", shortName: "id-cmc-statusInfo")
    public static let id_cmc_identification = OID(oid: "1.3.6.1.5.5.7.7.2", shortName: "id-cmc-identification")
    public static let id_cmc_identityProof = OID(oid: "1.3.6.1.5.5.7.7.3", shortName: "id-cmc-identityProof")
    public static let id_cmc_dataReturn = OID(oid: "1.3.6.1.5.5.7.7.4", shortName: "id-cmc-dataReturn")
    public static let id_cmc_transactionId = OID(oid: "1.3.6.1.5.5.7.7.5", shortName: "id-cmc-transactionId")
    public static let id_cmc_senderNonce = OID(oid: "1.3.6.1.5.5.7.7.6", shortName: "id-cmc-senderNonce")
    public static let id_cmc_recipientNonce = OID(oid: "1.3.6.1.5.5.7.7.7", shortName: "id-cmc-recipientNonce")
    public static let id_cmc_addExtensions = OID(oid: "1.3.6.1.5.5.7.7.8", shortName: "id-cmc-addExtensions")
    public static let id_cmc_encryptedPOP = OID(oid: "1.3.6.1.5.5.7.7.9", shortName: "id-cmc-encryptedPOP")
    public static let id_cmc_decryptedPOP = OID(oid: "1.3.6.1.5.5.7.7.10", shortName: "id-cmc-decryptedPOP")
    public static let id_cmc_lraPOPWitness = OID(oid: "1.3.6.1.5.5.7.7.11", shortName: "id-cmc-lraPOPWitness")
    public static let id_cmc_getCert = OID(oid: "1.3.6.1.5.5.7.7.15", shortName: "id-cmc-getCert")
    public static let id_cmc_getCRL = OID(oid: "1.3.6.1.5.5.7.7.16", shortName: "id-cmc-getCRL")
    public static let id_cmc_revokeRequest = OID(oid: "1.3.6.1.5.5.7.7.17", shortName: "id-cmc-revokeRequest")
    public static let id_cmc_regInfo = OID(oid: "1.3.6.1.5.5.7.7.18", shortName: "id-cmc-regInfo")
    public static let id_cmc_responseInfo = OID(oid: "1.3.6.1.5.5.7.7.19", shortName: "id-cmc-responseInfo")
    public static let id_cmc_queryPending = OID(oid: "1.3.6.1.5.5.7.7.21", shortName: "id-cmc-queryPending")
    public static let id_cmc_popLinkRandom = OID(oid: "1.3.6.1.5.5.7.7.22", shortName: "id-cmc-popLinkRandom")
    public static let id_cmc_popLinkWitness = OID(oid: "1.3.6.1.5.5.7.7.23", shortName: "id-cmc-popLinkWitness")
    public static let id_cmc_confirmCertAcceptance = OID(oid: "1.3.6.1.5.5.7.7.24", shortName: "id-cmc-confirmCertAcceptance")
    public static let id_on_personalData = OID(oid: "1.3.6.1.5.5.7.8.1", shortName: "id-on-personalData")
    public static let id_pda_dateOfBirth = OID(oid: "1.3.6.1.5.5.7.9.1", shortName: "id-pda-dateOfBirth")
    public static let id_pda_placeOfBirth = OID(oid: "1.3.6.1.5.5.7.9.2", shortName: "id-pda-placeOfBirth")
    public static let id_pda_gender = OID(oid: "1.3.6.1.5.5.7.9.3", shortName: "id-pda-gender")
    public static let id_pda_countryOfCitizenship = OID(oid: "1.3.6.1.5.5.7.9.4", shortName: "id-pda-countryOfCitizenship")
    public static let id_pda_countryOfResidence = OID(oid: "1.3.6.1.5.5.7.9.5", shortName: "id-pda-countryOfResidence")
    public static let id_aca_authenticationInfo = OID(oid: "1.3.6.1.5.5.7.10.1", shortName: "id-aca-authenticationInfo")
    public static let id_aca_accessIdentity = OID(oid: "1.3.6.1.5.5.7.10.2", shortName: "id-aca-accessIdentity")
    public static let id_aca_chargingIdentity = OID(oid: "1.3.6.1.5.5.7.10.3", shortName: "id-aca-chargingIdentity")
    public static let id_aca_group = OID(oid: "1.3.6.1.5.5.7.10.4", shortName: "id-aca-group")
    public static let id_aca_role = OID(oid: "1.3.6.1.5.5.7.10.5", shortName: "id-aca-role")
    public static let id_qcs_pkixQCSyntax_v1 = OID(oid: "1.3.6.1.5.5.7.11.1", shortName: "id-qcs-pkixQCSyntax-v1")
    public static let id_cct_crs = OID(oid: "1.3.6.1.5.5.7.12.1", shortName: "id-cct-crs")
    public static let id_cct_PKIData = OID(oid: "1.3.6.1.5.5.7.12.2", shortName: "id-cct-PKIData")
    public static let id_cct_PKIResponse = OID(oid: "1.3.6.1.5.5.7.12.3", shortName: "id-cct-PKIResponse")
    public static let ad_timestamping = OID(oid: "1.3.6.1.5.5.7.48.3", shortName: "ad_timestamping", longName: "AD Time Stamping")
    public static let AD_DVCS = OID(oid: "1.3.6.1.5.5.7.48.4", shortName: "AD_DVCS", longName: "ad dvcs")
    public static let basicOCSPResponse = OID(oid: "1.3.6.1.5.5.7.48.1.1", shortName: "basicOCSPResponse", longName: "Basic OCSP Response")
    public static let Nonce = OID(oid: "1.3.6.1.5.5.7.48.1.2", shortName: "Nonce", longName: "OCSP Nonce")
    public static let CrlID = OID(oid: "1.3.6.1.5.5.7.48.1.3", shortName: "CrlID", longName: "OCSP CRL ID")
    public static let acceptableResponses = OID(oid: "1.3.6.1.5.5.7.48.1.4", shortName: "acceptableResponses", longName: "Acceptable OCSP Responses")
    public static let noCheck = OID(oid: "1.3.6.1.5.5.7.48.1.5", shortName: "noCheck", longName: "OCSP No Check")
    public static let archiveCutoff = OID(oid: "1.3.6.1.5.5.7.48.1.6", shortName: "archiveCutoff", longName: "OCSP Archive Cutoff")
    public static let serviceLocator = OID(oid: "1.3.6.1.5.5.7.48.1.7", shortName: "serviceLocator", longName: "OCSP Service Locator")
    public static let extendedStatus = OID(oid: "1.3.6.1.5.5.7.48.1.8", shortName: "extendedStatus", longName: "Extended OCSP Status")
    public static let valid = OID(oid: "1.3.6.1.5.5.7.48.1.9", shortName: "valid")
    public static let path = OID(oid: "1.3.6.1.5.5.7.48.1.10", shortName: "path")
    public static let trustRoot = OID(oid: "1.3.6.1.5.5.7.48.1.11", shortName: "trustRoot", longName: "Trust Root")
    public static let algorithm = OID(oid: "1.3.14.3.2", shortName: "algorithm")
    public static let rsaSignature = OID(oid: "1.3.14.3.2.11", shortName: "rsaSignature")
    public static let X500algorithms = OID(oid: "2.5.8", shortName: "X500algorithms", longName: "directory services - algorithms")
    public static let ORG = OID(oid: "1.3", shortName: "ORG", longName: "org")
    public static let DOD = OID(oid: "1.3.6", shortName: "DOD", longName: "dod")
    public static let IANA = OID(oid: "1.3.6.1", shortName: "IANA", longName: "iana")
    public static let directory = OID(oid: "1.3.6.1.1", shortName: "directory", longName: "Directory")
    public static let mgmt = OID(oid: "1.3.6.1.2", shortName: "mgmt", longName: "Management")
    public static let experimental = OID(oid: "1.3.6.1.3", shortName: "experimental", longName: "Experimental")
    public static let security = OID(oid: "1.3.6.1.5", shortName: "security", longName: "Security")
    public static let snmpv2 = OID(oid: "1.3.6.1.6", shortName: "snmpv2", longName: "SNMPv2")
    public static let Mail = OID(oid: "1.3.6.1.7", shortName: "Mail")
    public static let enterprises = OID(oid: "1.3.6.1.4.1", shortName: "enterprises", longName: "Enterprises")
    public static let dcobject = OID(oid: "1.3.6.1.4.1.1466.344", shortName: "dcobject", longName: "dcObject")
    public static let DC = OID(oid: "0.9.2342.19200300.100.1.25", shortName: "DC", longName: "domainComponent")
    public static let domain = OID(oid: "0.9.2342.19200300.100.4.13", shortName: "domain", longName: "Domain")
    public static let selected_attribute_types = OID(oid: "2.5.1.5", shortName: "selected-attribute-types", longName: "Selected Attribute Types")
    public static let clearance = OID(oid: "2.5.1.5.55", shortName: "clearance")
    public static let RSA_MD4 = OID(oid: "1.2.840.113549.1.1.3", shortName: "RSA-MD4", longName: "md4WithRSAEncryption")
    public static let ac_proxying = OID(oid: "1.3.6.1.5.5.7.1.10", shortName: "ac-proxying")
    public static let subjectInfoAccess = OID(oid: "1.3.6.1.5.5.7.1.11", shortName: "subjectInfoAccess", longName: "Subject Information Access")
    public static let id_aca_encAttrs = OID(oid: "1.3.6.1.5.5.7.10.6", shortName: "id-aca-encAttrs")
    public static let role = OID(oid: "2.5.4.72", shortName: "role")
    public static let policyConstraints = OID(oid: "2.5.29.36", shortName: "policyConstraints", longName: "X509v3 Policy Constraints")
    public static let targetInformation = OID(oid: "2.5.29.55", shortName: "targetInformation", longName: "X509v3 AC Targeting")
    public static let noRevAvail = OID(oid: "2.5.29.56", shortName: "noRevAvail", longName: "X509v3 No Revocation Available")
    public static let ansi_X9_62 = OID(oid: "1.2.840.10045", shortName: "ansi-X9-62", longName: "ANSI X9.62")
    public static let prime_field = OID(oid: "1.2.840.10045.1.1", shortName: "prime-field")
    public static let characteristic_two_field = OID(oid: "1.2.840.10045.1.2", shortName: "characteristic-two-field")
    public static let id_ecPublicKey = OID(oid: "1.2.840.10045.2.1", shortName: "id-ecPublicKey")
    public static let prime192v1 = OID(oid: "1.2.840.10045.3.1.1", shortName: "prime192v1")
    public static let prime192v2 = OID(oid: "1.2.840.10045.3.1.2", shortName: "prime192v2")
    public static let prime192v3 = OID(oid: "1.2.840.10045.3.1.3", shortName: "prime192v3")
    public static let prime239v1 = OID(oid: "1.2.840.10045.3.1.4", shortName: "prime239v1")
    public static let prime239v2 = OID(oid: "1.2.840.10045.3.1.5", shortName: "prime239v2")
    public static let prime239v3 = OID(oid: "1.2.840.10045.3.1.6", shortName: "prime239v3")
    public static let prime256v1 = OID(oid: "1.2.840.10045.3.1.7", shortName: "prime256v1")
    public static let ecdsa_with_SHA1 = OID(oid: "1.2.840.10045.4.1", shortName: "ecdsa-with-SHA1")
    public static let CSPName = OID(oid: "1.3.6.1.4.1.311.17.1", shortName: "CSPName", longName: "Microsoft CSP Name")
    public static let AES_128_ECB = OID(oid: "2.16.840.1.101.3.4.1.1", shortName: "AES-128-ECB", longName: "aes-128-ecb")
    public static let AES_128_CBC = OID(oid: "2.16.840.1.101.3.4.1.2", shortName: "AES-128-CBC", longName: "aes-128-cbc")
    public static let AES_128_OFB = OID(oid: "2.16.840.1.101.3.4.1.3", shortName: "AES-128-OFB", longName: "aes-128-ofb")
    public static let AES_128_CFB = OID(oid: "2.16.840.1.101.3.4.1.4", shortName: "AES-128-CFB", longName: "aes-128-cfb")
    public static let AES_192_ECB = OID(oid: "2.16.840.1.101.3.4.1.21", shortName: "AES-192-ECB", longName: "aes-192-ecb")
    public static let AES_192_CBC = OID(oid: "2.16.840.1.101.3.4.1.22", shortName: "AES-192-CBC", longName: "aes-192-cbc")
    public static let AES_192_OFB = OID(oid: "2.16.840.1.101.3.4.1.23", shortName: "AES-192-OFB", longName: "aes-192-ofb")
    public static let AES_192_CFB = OID(oid: "2.16.840.1.101.3.4.1.24", shortName: "AES-192-CFB", longName: "aes-192-cfb")
    public static let AES_256_ECB = OID(oid: "2.16.840.1.101.3.4.1.41", shortName: "AES-256-ECB", longName: "aes-256-ecb")
    public static let AES_256_CBC = OID(oid: "2.16.840.1.101.3.4.1.42", shortName: "AES-256-CBC", longName: "aes-256-cbc")
    public static let AES_256_OFB = OID(oid: "2.16.840.1.101.3.4.1.43", shortName: "AES-256-OFB", longName: "aes-256-ofb")
    public static let AES_256_CFB = OID(oid: "2.16.840.1.101.3.4.1.44", shortName: "AES-256-CFB", longName: "aes-256-cfb")
    public static let holdInstructionCode = OID(oid: "2.5.29.23", shortName: "holdInstructionCode", longName: "Hold Instruction Code")
    public static let holdInstructionNone = OID(oid: "1.2.840.10040.2.1", shortName: "holdInstructionNone", longName: "Hold Instruction None")
    public static let holdInstructionCallIssuer = OID(oid: "1.2.840.10040.2.2", shortName: "holdInstructionCallIssuer", longName: "Hold Instruction Call Issuer")
    public static let holdInstructionReject = OID(oid: "1.2.840.10040.2.3", shortName: "holdInstructionReject", longName: "Hold Instruction Reject")
    public static let data = OID(oid: "0.9", shortName: "data")
    public static let pss = OID(oid: "0.9.2342", shortName: "pss")
    public static let ucl = OID(oid: "0.9.2342.19200300", shortName: "ucl")
    public static let pilot = OID(oid: "0.9.2342.19200300.100", shortName: "pilot")
    public static let pilotAttributeType = OID(oid: "0.9.2342.19200300.100.1", shortName: "pilotAttributeType")
    public static let pilotAttributeSyntax = OID(oid: "0.9.2342.19200300.100.3", shortName: "pilotAttributeSyntax")
    public static let pilotObjectClass = OID(oid: "0.9.2342.19200300.100.4", shortName: "pilotObjectClass")
    public static let pilotGroups = OID(oid: "0.9.2342.19200300.100.10", shortName: "pilotGroups")
    public static let iA5StringSyntax = OID(oid: "0.9.2342.19200300.100.3.4", shortName: "iA5StringSyntax")
    public static let caseIgnoreIA5StringSyntax = OID(oid: "0.9.2342.19200300.100.3.5", shortName: "caseIgnoreIA5StringSyntax")
    public static let pilotObject = OID(oid: "0.9.2342.19200300.100.4.3", shortName: "pilotObject")
    public static let pilotPerson = OID(oid: "0.9.2342.19200300.100.4.4", shortName: "pilotPerson")
    public static let account = OID(oid: "0.9.2342.19200300.100.4.5", shortName: "account")
    public static let document = OID(oid: "0.9.2342.19200300.100.4.6", shortName: "document")
    public static let room = OID(oid: "0.9.2342.19200300.100.4.7", shortName: "room")
    public static let documentSeries = OID(oid: "0.9.2342.19200300.100.4.9", shortName: "documentSeries")
    public static let rFC822localPart = OID(oid: "0.9.2342.19200300.100.4.14", shortName: "rFC822localPart")
    public static let dNSDomain = OID(oid: "0.9.2342.19200300.100.4.15", shortName: "dNSDomain")
    public static let domainRelatedObject = OID(oid: "0.9.2342.19200300.100.4.17", shortName: "domainRelatedObject")
    public static let friendlyCountry = OID(oid: "0.9.2342.19200300.100.4.18", shortName: "friendlyCountry")
    public static let simpleSecurityObject = OID(oid: "0.9.2342.19200300.100.4.19", shortName: "simpleSecurityObject")
    public static let pilotOrganization = OID(oid: "0.9.2342.19200300.100.4.20", shortName: "pilotOrganization")
    public static let pilotDSA = OID(oid: "0.9.2342.19200300.100.4.21", shortName: "pilotDSA")
    public static let qualityLabelledData = OID(oid: "0.9.2342.19200300.100.4.22", shortName: "qualityLabelledData")
    public static let UID = OID(oid: "0.9.2342.19200300.100.1.1", shortName: "UID", longName: "userId")
    public static let textEncodedORAddress = OID(oid: "0.9.2342.19200300.100.1.2", shortName: "textEncodedORAddress")
    public static let mail = OID(oid: "0.9.2342.19200300.100.1.3", shortName: "mail", longName: "rfc822Mailbox")
    public static let info = OID(oid: "0.9.2342.19200300.100.1.4", shortName: "info")
    public static let favouriteDrink = OID(oid: "0.9.2342.19200300.100.1.5", shortName: "favouriteDrink")
    public static let roomNumber = OID(oid: "0.9.2342.19200300.100.1.6", shortName: "roomNumber")
    public static let photo = OID(oid: "0.9.2342.19200300.100.1.7", shortName: "photo")
    public static let userClass = OID(oid: "0.9.2342.19200300.100.1.8", shortName: "userClass")
    public static let host = OID(oid: "0.9.2342.19200300.100.1.9", shortName: "host")
    public static let manager = OID(oid: "0.9.2342.19200300.100.1.10", shortName: "manager")
    public static let documentIdentifier = OID(oid: "0.9.2342.19200300.100.1.11", shortName: "documentIdentifier")
    public static let documentTitle = OID(oid: "0.9.2342.19200300.100.1.12", shortName: "documentTitle")
    public static let documentVersion = OID(oid: "0.9.2342.19200300.100.1.13", shortName: "documentVersion")
    public static let documentAuthor = OID(oid: "0.9.2342.19200300.100.1.14", shortName: "documentAuthor")
    public static let documentLocation = OID(oid: "0.9.2342.19200300.100.1.15", shortName: "documentLocation")
    public static let homeTelephoneNumber = OID(oid: "0.9.2342.19200300.100.1.20", shortName: "homeTelephoneNumber")
    public static let secretary = OID(oid: "0.9.2342.19200300.100.1.21", shortName: "secretary")
    public static let otherMailbox = OID(oid: "0.9.2342.19200300.100.1.22", shortName: "otherMailbox")
    public static let lastModifiedTime = OID(oid: "0.9.2342.19200300.100.1.23", shortName: "lastModifiedTime")
    public static let lastModifiedBy = OID(oid: "0.9.2342.19200300.100.1.24", shortName: "lastModifiedBy")
    public static let aRecord = OID(oid: "0.9.2342.19200300.100.1.26", shortName: "aRecord")
    public static let pilotAttributeType27 = OID(oid: "0.9.2342.19200300.100.1.27", shortName: "pilotAttributeType27")
    public static let mXRecord = OID(oid: "0.9.2342.19200300.100.1.28", shortName: "mXRecord")
    public static let nSRecord = OID(oid: "0.9.2342.19200300.100.1.29", shortName: "nSRecord")
    public static let sOARecord = OID(oid: "0.9.2342.19200300.100.1.30", shortName: "sOARecord")
    public static let cNAMERecord = OID(oid: "0.9.2342.19200300.100.1.31", shortName: "cNAMERecord")
    public static let associatedDomain = OID(oid: "0.9.2342.19200300.100.1.37", shortName: "associatedDomain")
    public static let associatedName = OID(oid: "0.9.2342.19200300.100.1.38", shortName: "associatedName")
    public static let homePostalAddress = OID(oid: "0.9.2342.19200300.100.1.39", shortName: "homePostalAddress")
    public static let personalTitle = OID(oid: "0.9.2342.19200300.100.1.40", shortName: "personalTitle")
    public static let mobileTelephoneNumber = OID(oid: "0.9.2342.19200300.100.1.41", shortName: "mobileTelephoneNumber")
    public static let pagerTelephoneNumber = OID(oid: "0.9.2342.19200300.100.1.42", shortName: "pagerTelephoneNumber")
    public static let friendlyCountryName = OID(oid: "0.9.2342.19200300.100.1.43", shortName: "friendlyCountryName")
    public static let organizationalStatus = OID(oid: "0.9.2342.19200300.100.1.45", shortName: "organizationalStatus")
    public static let janetMailbox = OID(oid: "0.9.2342.19200300.100.1.46", shortName: "janetMailbox")
    public static let mailPreferenceOption = OID(oid: "0.9.2342.19200300.100.1.47", shortName: "mailPreferenceOption")
    public static let buildingName = OID(oid: "0.9.2342.19200300.100.1.48", shortName: "buildingName")
    public static let dSAQuality = OID(oid: "0.9.2342.19200300.100.1.49", shortName: "dSAQuality")
    public static let singleLevelQuality = OID(oid: "0.9.2342.19200300.100.1.50", shortName: "singleLevelQuality")
    public static let subtreeMinimumQuality = OID(oid: "0.9.2342.19200300.100.1.51", shortName: "subtreeMinimumQuality")
    public static let subtreeMaximumQuality = OID(oid: "0.9.2342.19200300.100.1.52", shortName: "subtreeMaximumQuality")
    public static let personalSignature = OID(oid: "0.9.2342.19200300.100.1.53", shortName: "personalSignature")
    public static let dITRedirect = OID(oid: "0.9.2342.19200300.100.1.54", shortName: "dITRedirect")
    public static let audio = OID(oid: "0.9.2342.19200300.100.1.55", shortName: "audio")
    public static let documentPublisher = OID(oid: "0.9.2342.19200300.100.1.56", shortName: "documentPublisher")
    public static let x500UniqueIdentifier = OID(oid: "2.5.4.45", shortName: "x500UniqueIdentifier")
    public static let mime_mhs = OID(oid: "1.3.6.1.7.1", shortName: "mime-mhs", longName: "MIME MHS")
    public static let mime_mhs_headings = OID(oid: "1.3.6.1.7.1.1", shortName: "mime-mhs-headings")
    public static let mime_mhs_bodies = OID(oid: "1.3.6.1.7.1.2", shortName: "mime-mhs-bodies")
    public static let id_hex_partial_message = OID(oid: "1.3.6.1.7.1.1.1", shortName: "id-hex-partial-message")
    public static let id_hex_multipart_message = OID(oid: "1.3.6.1.7.1.1.2", shortName: "id-hex-multipart-message")
    public static let generationQualifier = OID(oid: "2.5.4.44", shortName: "generationQualifier")
    public static let pseudonym = OID(oid: "2.5.4.65", shortName: "pseudonym")
    public static let id_set = OID(oid: "2.23.42", shortName: "id-set", longName: "Secure Electronic Transactions")
    public static let set_ctype = OID(oid: "2.23.42.0", shortName: "set-ctype", longName: "content types")
    public static let set_msgExt = OID(oid: "2.23.42.1", shortName: "set-msgExt", longName: "message extensions")
    public static let set_attr = OID(oid: "2.23.42.3", shortName: "set-attr")
    public static let set_policy = OID(oid: "2.23.42.5", shortName: "set-policy")
    public static let set_certExt = OID(oid: "2.23.42.7", shortName: "set-certExt", longName: "certificate extensions")
    public static let set_brand = OID(oid: "2.23.42.8", shortName: "set-brand")
    public static let setct_PANData = OID(oid: "2.23.42.0.0", shortName: "setct-PANData")
    public static let setct_PANToken = OID(oid: "2.23.42.0.1", shortName: "setct-PANToken")
    public static let setct_PANOnly = OID(oid: "2.23.42.0.2", shortName: "setct-PANOnly")
    public static let setct_OIData = OID(oid: "2.23.42.0.3", shortName: "setct-OIData")
    public static let setct_PI = OID(oid: "2.23.42.0.4", shortName: "setct-PI")
    public static let setct_PIData = OID(oid: "2.23.42.0.5", shortName: "setct-PIData")
    public static let setct_PIDataUnsigned = OID(oid: "2.23.42.0.6", shortName: "setct-PIDataUnsigned")
    public static let setct_HODInput = OID(oid: "2.23.42.0.7", shortName: "setct-HODInput")
    public static let setct_AuthResBaggage = OID(oid: "2.23.42.0.8", shortName: "setct-AuthResBaggage")
    public static let setct_AuthRevReqBaggage = OID(oid: "2.23.42.0.9", shortName: "setct-AuthRevReqBaggage")
    public static let setct_AuthRevResBaggage = OID(oid: "2.23.42.0.10", shortName: "setct-AuthRevResBaggage")
    public static let setct_CapTokenSeq = OID(oid: "2.23.42.0.11", shortName: "setct-CapTokenSeq")
    public static let setct_PInitResData = OID(oid: "2.23.42.0.12", shortName: "setct-PInitResData")
    public static let setct_PI_TBS = OID(oid: "2.23.42.0.13", shortName: "setct-PI-TBS")
    public static let setct_PResData = OID(oid: "2.23.42.0.14", shortName: "setct-PResData")
    public static let setct_AuthReqTBS = OID(oid: "2.23.42.0.16", shortName: "setct-AuthReqTBS")
    public static let setct_AuthResTBS = OID(oid: "2.23.42.0.17", shortName: "setct-AuthResTBS")
    public static let setct_AuthResTBSX = OID(oid: "2.23.42.0.18", shortName: "setct-AuthResTBSX")
    public static let setct_AuthTokenTBS = OID(oid: "2.23.42.0.19", shortName: "setct-AuthTokenTBS")
    public static let setct_CapTokenData = OID(oid: "2.23.42.0.20", shortName: "setct-CapTokenData")
    public static let setct_CapTokenTBS = OID(oid: "2.23.42.0.21", shortName: "setct-CapTokenTBS")
    public static let setct_AcqCardCodeMsg = OID(oid: "2.23.42.0.22", shortName: "setct-AcqCardCodeMsg")
    public static let setct_AuthRevReqTBS = OID(oid: "2.23.42.0.23", shortName: "setct-AuthRevReqTBS")
    public static let setct_AuthRevResData = OID(oid: "2.23.42.0.24", shortName: "setct-AuthRevResData")
    public static let setct_AuthRevResTBS = OID(oid: "2.23.42.0.25", shortName: "setct-AuthRevResTBS")
    public static let setct_CapReqTBS = OID(oid: "2.23.42.0.26", shortName: "setct-CapReqTBS")
    public static let setct_CapReqTBSX = OID(oid: "2.23.42.0.27", shortName: "setct-CapReqTBSX")
    public static let setct_CapResData = OID(oid: "2.23.42.0.28", shortName: "setct-CapResData")
    public static let setct_CapRevReqTBS = OID(oid: "2.23.42.0.29", shortName: "setct-CapRevReqTBS")
    public static let setct_CapRevReqTBSX = OID(oid: "2.23.42.0.30", shortName: "setct-CapRevReqTBSX")
    public static let setct_CapRevResData = OID(oid: "2.23.42.0.31", shortName: "setct-CapRevResData")
    public static let setct_CredReqTBS = OID(oid: "2.23.42.0.32", shortName: "setct-CredReqTBS")
    public static let setct_CredReqTBSX = OID(oid: "2.23.42.0.33", shortName: "setct-CredReqTBSX")
    public static let setct_CredResData = OID(oid: "2.23.42.0.34", shortName: "setct-CredResData")
    public static let setct_CredRevReqTBS = OID(oid: "2.23.42.0.35", shortName: "setct-CredRevReqTBS")
    public static let setct_CredRevReqTBSX = OID(oid: "2.23.42.0.36", shortName: "setct-CredRevReqTBSX")
    public static let setct_CredRevResData = OID(oid: "2.23.42.0.37", shortName: "setct-CredRevResData")
    public static let setct_PCertReqData = OID(oid: "2.23.42.0.38", shortName: "setct-PCertReqData")
    public static let setct_PCertResTBS = OID(oid: "2.23.42.0.39", shortName: "setct-PCertResTBS")
    public static let setct_BatchAdminReqData = OID(oid: "2.23.42.0.40", shortName: "setct-BatchAdminReqData")
    public static let setct_BatchAdminResData = OID(oid: "2.23.42.0.41", shortName: "setct-BatchAdminResData")
    public static let setct_CardCInitResTBS = OID(oid: "2.23.42.0.42", shortName: "setct-CardCInitResTBS")
    public static let setct_MeAqCInitResTBS = OID(oid: "2.23.42.0.43", shortName: "setct-MeAqCInitResTBS")
    public static let setct_RegFormResTBS = OID(oid: "2.23.42.0.44", shortName: "setct-RegFormResTBS")
    public static let setct_CertReqData = OID(oid: "2.23.42.0.45", shortName: "setct-CertReqData")
    public static let setct_CertReqTBS = OID(oid: "2.23.42.0.46", shortName: "setct-CertReqTBS")
    public static let setct_CertResData = OID(oid: "2.23.42.0.47", shortName: "setct-CertResData")
    public static let setct_CertInqReqTBS = OID(oid: "2.23.42.0.48", shortName: "setct-CertInqReqTBS")
    public static let setct_ErrorTBS = OID(oid: "2.23.42.0.49", shortName: "setct-ErrorTBS")
    public static let setct_PIDualSignedTBE = OID(oid: "2.23.42.0.50", shortName: "setct-PIDualSignedTBE")
    public static let setct_PIUnsignedTBE = OID(oid: "2.23.42.0.51", shortName: "setct-PIUnsignedTBE")
    public static let setct_AuthReqTBE = OID(oid: "2.23.42.0.52", shortName: "setct-AuthReqTBE")
    public static let setct_AuthResTBE = OID(oid: "2.23.42.0.53", shortName: "setct-AuthResTBE")
    public static let setct_AuthResTBEX = OID(oid: "2.23.42.0.54", shortName: "setct-AuthResTBEX")
    public static let setct_AuthTokenTBE = OID(oid: "2.23.42.0.55", shortName: "setct-AuthTokenTBE")
    public static let setct_CapTokenTBE = OID(oid: "2.23.42.0.56", shortName: "setct-CapTokenTBE")
    public static let setct_CapTokenTBEX = OID(oid: "2.23.42.0.57", shortName: "setct-CapTokenTBEX")
    public static let setct_AcqCardCodeMsgTBE = OID(oid: "2.23.42.0.58", shortName: "setct-AcqCardCodeMsgTBE")
    public static let setct_AuthRevReqTBE = OID(oid: "2.23.42.0.59", shortName: "setct-AuthRevReqTBE")
    public static let setct_AuthRevResTBE = OID(oid: "2.23.42.0.60", shortName: "setct-AuthRevResTBE")
    public static let setct_AuthRevResTBEB = OID(oid: "2.23.42.0.61", shortName: "setct-AuthRevResTBEB")
    public static let setct_CapReqTBE = OID(oid: "2.23.42.0.62", shortName: "setct-CapReqTBE")
    public static let setct_CapReqTBEX = OID(oid: "2.23.42.0.63", shortName: "setct-CapReqTBEX")
    public static let setct_CapResTBE = OID(oid: "2.23.42.0.64", shortName: "setct-CapResTBE")
    public static let setct_CapRevReqTBE = OID(oid: "2.23.42.0.65", shortName: "setct-CapRevReqTBE")
    public static let setct_CapRevReqTBEX = OID(oid: "2.23.42.0.66", shortName: "setct-CapRevReqTBEX")
    public static let setct_CapRevResTBE = OID(oid: "2.23.42.0.67", shortName: "setct-CapRevResTBE")
    public static let setct_CredReqTBE = OID(oid: "2.23.42.0.68", shortName: "setct-CredReqTBE")
    public static let setct_CredReqTBEX = OID(oid: "2.23.42.0.69", shortName: "setct-CredReqTBEX")
    public static let setct_CredResTBE = OID(oid: "2.23.42.0.70", shortName: "setct-CredResTBE")
    public static let setct_CredRevReqTBE = OID(oid: "2.23.42.0.71", shortName: "setct-CredRevReqTBE")
    public static let setct_CredRevReqTBEX = OID(oid: "2.23.42.0.72", shortName: "setct-CredRevReqTBEX")
    public static let setct_CredRevResTBE = OID(oid: "2.23.42.0.73", shortName: "setct-CredRevResTBE")
    public static let setct_BatchAdminReqTBE = OID(oid: "2.23.42.0.74", shortName: "setct-BatchAdminReqTBE")
    public static let setct_BatchAdminResTBE = OID(oid: "2.23.42.0.75", shortName: "setct-BatchAdminResTBE")
    public static let setct_RegFormReqTBE = OID(oid: "2.23.42.0.76", shortName: "setct-RegFormReqTBE")
    public static let setct_CertReqTBE = OID(oid: "2.23.42.0.77", shortName: "setct-CertReqTBE")
    public static let setct_CertReqTBEX = OID(oid: "2.23.42.0.78", shortName: "setct-CertReqTBEX")
    public static let setct_CertResTBE = OID(oid: "2.23.42.0.79", shortName: "setct-CertResTBE")
    public static let setct_CRLNotificationTBS = OID(oid: "2.23.42.0.80", shortName: "setct-CRLNotificationTBS")
    public static let setct_CRLNotificationResTBS = OID(oid: "2.23.42.0.81", shortName: "setct-CRLNotificationResTBS")
    public static let setct_BCIDistributionTBS = OID(oid: "2.23.42.0.82", shortName: "setct-BCIDistributionTBS")
    public static let setext_genCrypt = OID(oid: "2.23.42.1.1", shortName: "setext-genCrypt", longName: "generic cryptogram")
    public static let setext_miAuth = OID(oid: "2.23.42.1.3", shortName: "setext-miAuth", longName: "merchant initiated auth")
    public static let setext_pinSecure = OID(oid: "2.23.42.1.4", shortName: "setext-pinSecure")
    public static let setext_pinAny = OID(oid: "2.23.42.1.5", shortName: "setext-pinAny")
    public static let setext_track2 = OID(oid: "2.23.42.1.7", shortName: "setext-track2")
    public static let setext_cv = OID(oid: "2.23.42.1.8", shortName: "setext-cv", longName: "additional verification")
    public static let set_policy_root = OID(oid: "2.23.42.5.0", shortName: "set-policy-root")
    public static let setCext_hashedRoot = OID(oid: "2.23.42.7.0", shortName: "setCext-hashedRoot")
    public static let setCext_certType = OID(oid: "2.23.42.7.1", shortName: "setCext-certType")
    public static let setCext_merchData = OID(oid: "2.23.42.7.2", shortName: "setCext-merchData")
    public static let setCext_cCertRequired = OID(oid: "2.23.42.7.3", shortName: "setCext-cCertRequired")
    public static let setCext_tunneling = OID(oid: "2.23.42.7.4", shortName: "setCext-tunneling")
    public static let setCext_setExt = OID(oid: "2.23.42.7.5", shortName: "setCext-setExt")
    public static let setCext_setQualf = OID(oid: "2.23.42.7.6", shortName: "setCext-setQualf")
    public static let setCext_PGWYcapabilities = OID(oid: "2.23.42.7.7", shortName: "setCext-PGWYcapabilities")
    public static let setCext_TokenIdentifier = OID(oid: "2.23.42.7.8", shortName: "setCext-TokenIdentifier")
    public static let setCext_Track2Data = OID(oid: "2.23.42.7.9", shortName: "setCext-Track2Data")
    public static let setCext_TokenType = OID(oid: "2.23.42.7.10", shortName: "setCext-TokenType")
    public static let setCext_IssuerCapabilities = OID(oid: "2.23.42.7.11", shortName: "setCext-IssuerCapabilities")
    public static let setAttr_Cert = OID(oid: "2.23.42.3.0", shortName: "setAttr-Cert")
    public static let setAttr_PGWYcap = OID(oid: "2.23.42.3.1", shortName: "setAttr-PGWYcap", longName: "payment gateway capabilities")
    public static let setAttr_TokenType = OID(oid: "2.23.42.3.2", shortName: "setAttr-TokenType")
    public static let setAttr_IssCap = OID(oid: "2.23.42.3.3", shortName: "setAttr-IssCap", longName: "issuer capabilities")
    public static let set_rootKeyThumb = OID(oid: "2.23.42.3.0.0", shortName: "set-rootKeyThumb")
    public static let set_addPolicy = OID(oid: "2.23.42.3.0.1", shortName: "set-addPolicy")
    public static let setAttr_Token_EMV = OID(oid: "2.23.42.3.2.1", shortName: "setAttr-Token-EMV")
    public static let setAttr_Token_B0Prime = OID(oid: "2.23.42.3.2.2", shortName: "setAttr-Token-B0Prime")
    public static let setAttr_IssCap_CVM = OID(oid: "2.23.42.3.3.3", shortName: "setAttr-IssCap-CVM")
    public static let setAttr_IssCap_T2 = OID(oid: "2.23.42.3.3.4", shortName: "setAttr-IssCap-T2")
    public static let setAttr_IssCap_Sig = OID(oid: "2.23.42.3.3.5", shortName: "setAttr-IssCap-Sig")
    public static let setAttr_GenCryptgrm = OID(oid: "2.23.42.3.3.3.1", shortName: "setAttr-GenCryptgrm", longName: "generate cryptogram")
    public static let setAttr_T2Enc = OID(oid: "2.23.42.3.3.4.1", shortName: "setAttr-T2Enc", longName: "encrypted track 2")
    public static let setAttr_T2cleartxt = OID(oid: "2.23.42.3.3.4.2", shortName: "setAttr-T2cleartxt", longName: "cleartext track 2")
    public static let setAttr_TokICCsig = OID(oid: "2.23.42.3.3.5.1", shortName: "setAttr-TokICCsig", longName: "ICC or token signature")
    public static let setAttr_SecDevSig = OID(oid: "2.23.42.3.3.5.2", shortName: "setAttr-SecDevSig", longName: "secure device signature")
    public static let set_brand_IATA_ATA = OID(oid: "2.23.42.8.1", shortName: "set-brand-IATA-ATA")
    public static let set_brand_Diners = OID(oid: "2.23.42.8.30", shortName: "set-brand-Diners")
    public static let set_brand_AmericanExpress = OID(oid: "2.23.42.8.34", shortName: "set-brand-AmericanExpress")
    public static let set_brand_JCB = OID(oid: "2.23.42.8.35", shortName: "set-brand-JCB")
    public static let set_brand_Visa = OID(oid: "2.23.42.8.4", shortName: "set-brand-Visa")
    public static let set_brand_MasterCard = OID(oid: "2.23.42.8.5", shortName: "set-brand-MasterCard")
    public static let set_brand_Novus = OID(oid: "2.23.42.8.6011", shortName: "set-brand-Novus")
    public static let DES_CDMF = OID(oid: "1.2.840.113549.3.10", shortName: "DES-CDMF", longName: "des-cdmf")
    public static let rsaOAEPEncryptionSET = OID(oid: "1.2.840.113549.1.1.6", shortName: "rsaOAEPEncryptionSET")
    public static let international_organizations = OID(oid: "2.23", shortName: "international-organizations", longName: "International Organizations")
    public static let msSmartcardLogin = OID(oid: "1.3.6.1.4.1.311.20.2.2", shortName: "msSmartcardLogin", longName: "Microsoft Smartcardlogin")
    public static let msUPN = OID(oid: "1.3.6.1.4.1.311.20.2.3", shortName: "msUPN", longName: "Microsoft Universal Principal Name")
    public static let street = OID(oid: "2.5.4.9", shortName: "street", longName: "streetAddress")
    public static let postalCode = OID(oid: "2.5.4.17", shortName: "postalCode")
    public static let id_ppl = OID(oid: "1.3.6.1.5.5.7.21", shortName: "id-ppl")
    public static let proxyCertInfo = OID(oid: "1.3.6.1.5.5.7.1.14", shortName: "proxyCertInfo", longName: "Proxy Certificate Information")
    public static let id_ppl_anyLanguage = OID(oid: "1.3.6.1.5.5.7.21.0", shortName: "id-ppl-anyLanguage", longName: "Any language")
    public static let id_ppl_inheritAll = OID(oid: "1.3.6.1.5.5.7.21.1", shortName: "id-ppl-inheritAll", longName: "Inherit all")
    public static let nameConstraints = OID(oid: "2.5.29.30", shortName: "nameConstraints", longName: "X509v3 Name Constraints")
    public static let id_ppl_independent = OID(oid: "1.3.6.1.5.5.7.21.2", shortName: "id-ppl-independent", longName: "Independent")
    public static let sha256WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.11", shortName: "RSA-SHA256", longName: "sha256WithRSAEncryption")
    public static let sha384WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.12", shortName: "RSA-SHA384", longName: "sha384WithRSAEncryption")
    public static let sha512WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.13", shortName: "RSA-SHA512", longName: "sha512WithRSAEncryption")
    public static let sha224WithRSAEncryption = OID(oid: "1.2.840.113549.1.1.14", shortName: "RSA-SHA224", longName: "sha224WithRSAEncryption")
    public static let SHA256 = OID(oid: "2.16.840.1.101.3.4.2.1", shortName: "SHA256", longName: "sha256")
    public static let SHA384 = OID(oid: "2.16.840.1.101.3.4.2.2", shortName: "SHA384", longName: "sha384")
    public static let SHA512 = OID(oid: "2.16.840.1.101.3.4.2.3", shortName: "SHA512", longName: "sha512")
    public static let SHA224 = OID(oid: "2.16.840.1.101.3.4.2.4", shortName: "SHA224", longName: "sha224")
    public static let identified_organization = OID(oid: "1.3", shortName: "identified-organization")
    public static let certicom_arc = OID(oid: "1.3.132", shortName: "certicom-arc")
    public static let wap = OID(oid: "2.23.43", shortName: "wap")
    public static let wap_wsg = OID(oid: "2.23.43.1", shortName: "wap-wsg")
    public static let id_characteristic_two_basis = OID(oid: "1.2.840.10045.1.2.3", shortName: "id-characteristic-two-basis")
    public static let onBasis = OID(oid: "1.2.840.10045.1.2.3.1", shortName: "onBasis")
    public static let tpBasis = OID(oid: "1.2.840.10045.1.2.3.2", shortName: "tpBasis")
    public static let ppBasis = OID(oid: "1.2.840.10045.1.2.3.3", shortName: "ppBasis")
    public static let c2pnb163v1 = OID(oid: "1.2.840.10045.3.0.1", shortName: "c2pnb163v1")
    public static let c2pnb163v2 = OID(oid: "1.2.840.10045.3.0.2", shortName: "c2pnb163v2")
    public static let c2pnb163v3 = OID(oid: "1.2.840.10045.3.0.3", shortName: "c2pnb163v3")
    public static let c2pnb176v1 = OID(oid: "1.2.840.10045.3.0.4", shortName: "c2pnb176v1")
    public static let c2tnb191v1 = OID(oid: "1.2.840.10045.3.0.5", shortName: "c2tnb191v1")
    public static let c2tnb191v2 = OID(oid: "1.2.840.10045.3.0.6", shortName: "c2tnb191v2")
    public static let c2tnb191v3 = OID(oid: "1.2.840.10045.3.0.7", shortName: "c2tnb191v3")
    public static let c2onb191v4 = OID(oid: "1.2.840.10045.3.0.8", shortName: "c2onb191v4")
    public static let c2onb191v5 = OID(oid: "1.2.840.10045.3.0.9", shortName: "c2onb191v5")
    public static let c2pnb208w1 = OID(oid: "1.2.840.10045.3.0.10", shortName: "c2pnb208w1")
    public static let c2tnb239v1 = OID(oid: "1.2.840.10045.3.0.11", shortName: "c2tnb239v1")
    public static let c2tnb239v2 = OID(oid: "1.2.840.10045.3.0.12", shortName: "c2tnb239v2")
    public static let c2tnb239v3 = OID(oid: "1.2.840.10045.3.0.13", shortName: "c2tnb239v3")
    public static let c2onb239v4 = OID(oid: "1.2.840.10045.3.0.14", shortName: "c2onb239v4")
    public static let c2onb239v5 = OID(oid: "1.2.840.10045.3.0.15", shortName: "c2onb239v5")
    public static let c2pnb272w1 = OID(oid: "1.2.840.10045.3.0.16", shortName: "c2pnb272w1")
    public static let c2pnb304w1 = OID(oid: "1.2.840.10045.3.0.17", shortName: "c2pnb304w1")
    public static let c2tnb359v1 = OID(oid: "1.2.840.10045.3.0.18", shortName: "c2tnb359v1")
    public static let c2pnb368w1 = OID(oid: "1.2.840.10045.3.0.19", shortName: "c2pnb368w1")
    public static let c2tnb431r1 = OID(oid: "1.2.840.10045.3.0.20", shortName: "c2tnb431r1")
    public static let secp112r1 = OID(oid: "1.3.132.0.6", shortName: "secp112r1")
    public static let secp112r2 = OID(oid: "1.3.132.0.7", shortName: "secp112r2")
    public static let secp128r1 = OID(oid: "1.3.132.0.28", shortName: "secp128r1")
    public static let secp128r2 = OID(oid: "1.3.132.0.29", shortName: "secp128r2")
    public static let secp160k1 = OID(oid: "1.3.132.0.9", shortName: "secp160k1")
    public static let secp160r1 = OID(oid: "1.3.132.0.8", shortName: "secp160r1")
    public static let secp160r2 = OID(oid: "1.3.132.0.30", shortName: "secp160r2")
    public static let secp192k1 = OID(oid: "1.3.132.0.31", shortName: "secp192k1")
    public static let secp224k1 = OID(oid: "1.3.132.0.32", shortName: "secp224k1")
    public static let secp224r1 = OID(oid: "1.3.132.0.33", shortName: "secp224r1")
    public static let secp256k1 = OID(oid: "1.3.132.0.10", shortName: "secp256k1")
    public static let secp384r1 = OID(oid: "1.3.132.0.34", shortName: "secp384r1")
    public static let secp521r1 = OID(oid: "1.3.132.0.35", shortName: "secp521r1")
    public static let sect113r1 = OID(oid: "1.3.132.0.4", shortName: "sect113r1")
    public static let sect113r2 = OID(oid: "1.3.132.0.5", shortName: "sect113r2")
    public static let sect131r1 = OID(oid: "1.3.132.0.22", shortName: "sect131r1")
    public static let sect131r2 = OID(oid: "1.3.132.0.23", shortName: "sect131r2")
    public static let sect163k1 = OID(oid: "1.3.132.0.1", shortName: "sect163k1")
    public static let sect163r1 = OID(oid: "1.3.132.0.2", shortName: "sect163r1")
    public static let sect163r2 = OID(oid: "1.3.132.0.15", shortName: "sect163r2")
    public static let sect193r1 = OID(oid: "1.3.132.0.24", shortName: "sect193r1")
    public static let sect193r2 = OID(oid: "1.3.132.0.25", shortName: "sect193r2")
    public static let sect233k1 = OID(oid: "1.3.132.0.26", shortName: "sect233k1")
    public static let sect233r1 = OID(oid: "1.3.132.0.27", shortName: "sect233r1")
    public static let sect239k1 = OID(oid: "1.3.132.0.3", shortName: "sect239k1")
    public static let sect283k1 = OID(oid: "1.3.132.0.16", shortName: "sect283k1")
    public static let sect283r1 = OID(oid: "1.3.132.0.17", shortName: "sect283r1")
    public static let sect409k1 = OID(oid: "1.3.132.0.36", shortName: "sect409k1")
    public static let sect409r1 = OID(oid: "1.3.132.0.37", shortName: "sect409r1")
    public static let sect571k1 = OID(oid: "1.3.132.0.38", shortName: "sect571k1")
    public static let sect571r1 = OID(oid: "1.3.132.0.39", shortName: "sect571r1")
    public static let wap_wsg_idm_ecid_wtls1 = OID(oid: "2.23.43.1.4.1", shortName: "wap-wsg-idm-ecid-wtls1")
    public static let wap_wsg_idm_ecid_wtls3 = OID(oid: "2.23.43.1.4.3", shortName: "wap-wsg-idm-ecid-wtls3")
    public static let wap_wsg_idm_ecid_wtls4 = OID(oid: "2.23.43.1.4.4", shortName: "wap-wsg-idm-ecid-wtls4")
    public static let wap_wsg_idm_ecid_wtls5 = OID(oid: "2.23.43.1.4.5", shortName: "wap-wsg-idm-ecid-wtls5")
    public static let wap_wsg_idm_ecid_wtls6 = OID(oid: "2.23.43.1.4.6", shortName: "wap-wsg-idm-ecid-wtls6")
    public static let wap_wsg_idm_ecid_wtls7 = OID(oid: "2.23.43.1.4.7", shortName: "wap-wsg-idm-ecid-wtls7")
    public static let wap_wsg_idm_ecid_wtls8 = OID(oid: "2.23.43.1.4.8", shortName: "wap-wsg-idm-ecid-wtls8")
    public static let wap_wsg_idm_ecid_wtls9 = OID(oid: "2.23.43.1.4.9", shortName: "wap-wsg-idm-ecid-wtls9")
    public static let wap_wsg_idm_ecid_wtls10 = OID(oid: "2.23.43.1.4.10", shortName: "wap-wsg-idm-ecid-wtls10")
    public static let wap_wsg_idm_ecid_wtls11 = OID(oid: "2.23.43.1.4.11", shortName: "wap-wsg-idm-ecid-wtls11")
    public static let wap_wsg_idm_ecid_wtls12 = OID(oid: "2.23.43.1.4.12", shortName: "wap-wsg-idm-ecid-wtls12")
    public static let anyPolicy = OID(oid: "2.5.29.32.0", shortName: "anyPolicy", longName: "X509v3 Any Policy")
    public static let policyMappings = OID(oid: "2.5.29.33", shortName: "policyMappings", longName: "X509v3 Policy Mappings")
    public static let inhibitAnyPolicy = OID(oid: "2.5.29.54", shortName: "inhibitAnyPolicy", longName: "X509v3 Inhibit Any Policy")
    public static let CAMELLIA_128_CBC = OID(oid: "1.2.392.200011.61.1.1.1.2", shortName: "CAMELLIA-128-CBC", longName: "camellia-128-cbc")
    public static let CAMELLIA_192_CBC = OID(oid: "1.2.392.200011.61.1.1.1.3", shortName: "CAMELLIA-192-CBC", longName: "camellia-192-cbc")
    public static let CAMELLIA_256_CBC = OID(oid: "1.2.392.200011.61.1.1.1.4", shortName: "CAMELLIA-256-CBC", longName: "camellia-256-cbc")
    public static let CAMELLIA_128_ECB = OID(oid: "0.3.4401.5.3.1.9.1", shortName: "CAMELLIA-128-ECB", longName: "camellia-128-ecb")
    public static let CAMELLIA_192_ECB = OID(oid: "0.3.4401.5.3.1.9.21", shortName: "CAMELLIA-192-ECB", longName: "camellia-192-ecb")
    public static let CAMELLIA_256_ECB = OID(oid: "0.3.4401.5.3.1.9.41", shortName: "CAMELLIA-256-ECB", longName: "camellia-256-ecb")
    public static let CAMELLIA_128_CFB = OID(oid: "0.3.4401.5.3.1.9.4", shortName: "CAMELLIA-128-CFB", longName: "camellia-128-cfb")
    public static let CAMELLIA_192_CFB = OID(oid: "0.3.4401.5.3.1.9.24", shortName: "CAMELLIA-192-CFB", longName: "camellia-192-cfb")
    public static let CAMELLIA_256_CFB = OID(oid: "0.3.4401.5.3.1.9.44", shortName: "CAMELLIA-256-CFB", longName: "camellia-256-cfb")
    public static let CAMELLIA_128_OFB = OID(oid: "0.3.4401.5.3.1.9.3", shortName: "CAMELLIA-128-OFB", longName: "camellia-128-ofb")
    public static let CAMELLIA_192_OFB = OID(oid: "0.3.4401.5.3.1.9.23", shortName: "CAMELLIA-192-OFB", longName: "camellia-192-ofb")
    public static let CAMELLIA_256_OFB = OID(oid: "0.3.4401.5.3.1.9.43", shortName: "CAMELLIA-256-OFB", longName: "camellia-256-ofb")
    public static let subjectDirectoryAttributes = OID(oid: "2.5.29.9", shortName: "subjectDirectoryAttributes", longName: "X509v3 Subject Directory Attributes")
    public static let issuingDistributionPoint = OID(oid: "2.5.29.28", shortName: "issuingDistributionPoint", longName: "X509v3 Issuing Distribution Point")
    public static let certificateIssuer = OID(oid: "2.5.29.29", shortName: "certificateIssuer", longName: "X509v3 Certificate Issuer")
    public static let KISA = OID(oid: "1.2.410.200004", shortName: "KISA", longName: "kisa")
    public static let SEED_ECB = OID(oid: "1.2.410.200004.1.3", shortName: "SEED-ECB", longName: "seed-ecb")
    public static let SEED_CBC = OID(oid: "1.2.410.200004.1.4", shortName: "SEED-CBC", longName: "seed-cbc")
    public static let SEED_OFB = OID(oid: "1.2.410.200004.1.6", shortName: "SEED-OFB", longName: "seed-ofb")
    public static let SEED_CFB = OID(oid: "1.2.410.200004.1.5", shortName: "SEED-CFB", longName: "seed-cfb")
    public static let HMAC_MD5 = OID(oid: "1.3.6.1.5.5.8.1.1", shortName: "HMAC-MD5", longName: "hmac-md5")
    public static let HMAC_SHA1 = OID(oid: "1.3.6.1.5.5.8.1.2", shortName: "HMAC-SHA1", longName: "hmac-sha1")
    public static let id_PasswordBasedMAC = OID(oid: "1.2.840.113533.7.66.13", shortName: "id-PasswordBasedMAC", longName: "password based MAC")
    public static let id_DHBasedMac = OID(oid: "1.2.840.113533.7.66.30", shortName: "id-DHBasedMac", longName: "Diffie-Hellman based MAC")
    public static let id_it_suppLangTags = OID(oid: "1.3.6.1.5.5.7.4.16", shortName: "id-it-suppLangTags")
    public static let caRepository = OID(oid: "1.3.6.1.5.5.7.48.5", shortName: "caRepository", longName: "CA Repository")
    public static let id_smime_ct_compressedData = OID(oid: "1.2.840.113549.1.9.16.1.9", shortName: "id-smime-ct-compressedData")
    public static let id_ct_asciiTextWithCRLF = OID(oid: "1.2.840.113549.1.9.16.1.27", shortName: "id-ct-asciiTextWithCRLF")
    public static let id_aes128_wrap = OID(oid: "2.16.840.1.101.3.4.1.5", shortName: "id-aes128-wrap")
    public static let id_aes192_wrap = OID(oid: "2.16.840.1.101.3.4.1.25", shortName: "id-aes192-wrap")
    public static let id_aes256_wrap = OID(oid: "2.16.840.1.101.3.4.1.45", shortName: "id-aes256-wrap")
    public static let ecdsa_with_Recommended = OID(oid: "1.2.840.10045.4.2", shortName: "ecdsa-with-Recommended")
    public static let ecdsa_with_Specified = OID(oid: "1.2.840.10045.4.3", shortName: "ecdsa-with-Specified")
    public static let ecdsa_with_SHA224 = OID(oid: "1.2.840.10045.4.3.1", shortName: "ecdsa-with-SHA224")
    public static let ecdsa_with_SHA256 = OID(oid: "1.2.840.10045.4.3.2", shortName: "ecdsa-with-SHA256")
    public static let ecdsa_with_SHA384 = OID(oid: "1.2.840.10045.4.3.3", shortName: "ecdsa-with-SHA384")
    public static let ecdsa_with_SHA512 = OID(oid: "1.2.840.10045.4.3.4", shortName: "ecdsa-with-SHA512")
    public static let hmacWithMD5 = OID(oid: "1.2.840.113549.2.6", shortName: "hmacWithMD5")
    public static let hmacWithSHA224 = OID(oid: "1.2.840.113549.2.8", shortName: "hmacWithSHA224")
    public static let hmacWithSHA256 = OID(oid: "1.2.840.113549.2.9", shortName: "hmacWithSHA256")
    public static let hmacWithSHA384 = OID(oid: "1.2.840.113549.2.10", shortName: "hmacWithSHA384")
    public static let hmacWithSHA512 = OID(oid: "1.2.840.113549.2.11", shortName: "hmacWithSHA512")
    public static let dsa_with_SHA224 = OID(oid: "2.16.840.1.101.3.4.3.1", shortName: "dsa_with_SHA224")
    public static let dsa_with_SHA256 = OID(oid: "2.16.840.1.101.3.4.3.2", shortName: "dsa_with_SHA256")
    public static let whirlpool = OID(oid: "1.0.10118.3.0.55", shortName: "whirlpool")
    public static let cryptopro = OID(oid: "1.2.643.2.2", shortName: "cryptopro")
    public static let cryptocom = OID(oid: "1.2.643.2.9", shortName: "cryptocom")
    public static let id_GostR3411_94_with_GostR3410_2001 = OID(oid: "1.2.643.2.2.3", shortName: "id-GostR3411-94-with-GostR3410-2001", longName: "GOST R 34.11-94 with GOST R 34.10-2001")
    public static let id_GostR3411_94_with_GostR3410_94 = OID(oid: "1.2.643.2.2.4", shortName: "id-GostR3411-94-with-GostR3410-94", longName: "GOST R 34.11-94 with GOST R 34.10-94")
    public static let md_gost94 = OID(oid: "1.2.643.2.2.9", shortName: "md_gost94", longName: "GOST R 34.11-94")
    public static let id_HMACGostR3411_94 = OID(oid: "1.2.643.2.2.10", shortName: "id-HMACGostR3411-94", longName: "HMAC GOST 34.11-94")
    public static let gost2001 = OID(oid: "1.2.643.2.2.19", shortName: "gost2001", longName: "GOST R 34.10-2001")
    public static let gost94 = OID(oid: "1.2.643.2.2.20", shortName: "gost94", longName: "GOST R 34.10-94")
    public static let gost89 = OID(oid: "1.2.643.2.2.21", shortName: "gost89", longName: "GOST 28147-89")
    public static let gost_mac = OID(oid: "1.2.643.2.2.22", shortName: "gost-mac", longName: "GOST 28147-89 MAC")
    public static let prf_gostr3411_94 = OID(oid: "1.2.643.2.2.23", shortName: "prf-gostr3411-94", longName: "GOST R 34.11-94 PRF")
    public static let id_GostR3410_2001DH = OID(oid: "1.2.643.2.2.98", shortName: "id-GostR3410-2001DH", longName: "GOST R 34.10-2001 DH")
    public static let id_GostR3410_94DH = OID(oid: "1.2.643.2.2.99", shortName: "id-GostR3410-94DH", longName: "GOST R 34.10-94 DH")
    public static let id_Gost28147_89_CryptoPro_KeyMeshing = OID(oid: "1.2.643.2.2.14.1", shortName: "id-Gost28147-89-CryptoPro-KeyMeshing")
    public static let id_Gost28147_89_None_KeyMeshing = OID(oid: "1.2.643.2.2.14.0", shortName: "id-Gost28147-89-None-KeyMeshing")
    public static let id_GostR3411_94_TestParamSet = OID(oid: "1.2.643.2.2.30.0", shortName: "id-GostR3411-94-TestParamSet")
    public static let id_GostR3411_94_CryptoProParamSet = OID(oid: "1.2.643.2.2.30.1", shortName: "id-GostR3411-94-CryptoProParamSet")
    public static let id_Gost28147_89_TestParamSet = OID(oid: "1.2.643.2.2.31.0", shortName: "id-Gost28147-89-TestParamSet")
    public static let id_Gost28147_89_CryptoPro_A_ParamSet = OID(oid: "1.2.643.2.2.31.1", shortName: "id-Gost28147-89-CryptoPro-A-ParamSet")
    public static let id_Gost28147_89_CryptoPro_B_ParamSet = OID(oid: "1.2.643.2.2.31.2", shortName: "id-Gost28147-89-CryptoPro-B-ParamSet")
    public static let id_Gost28147_89_CryptoPro_C_ParamSet = OID(oid: "1.2.643.2.2.31.3", shortName: "id-Gost28147-89-CryptoPro-C-ParamSet")
    public static let id_Gost28147_89_CryptoPro_D_ParamSet = OID(oid: "1.2.643.2.2.31.4", shortName: "id-Gost28147-89-CryptoPro-D-ParamSet")
    public static let id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = OID(oid: "1.2.643.2.2.31.5", shortName: "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet")
    public static let id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = OID(oid: "1.2.643.2.2.31.6", shortName: "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet")
    public static let id_Gost28147_89_CryptoPro_RIC_1_ParamSet = OID(oid: "1.2.643.2.2.31.7", shortName: "id-Gost28147-89-CryptoPro-RIC-1-ParamSet")
    public static let id_GostR3410_94_TestParamSet = OID(oid: "1.2.643.2.2.32.0", shortName: "id-GostR3410-94-TestParamSet")
    public static let id_GostR3410_94_CryptoPro_A_ParamSet = OID(oid: "1.2.643.2.2.32.2", shortName: "id-GostR3410-94-CryptoPro-A-ParamSet")
    public static let id_GostR3410_94_CryptoPro_B_ParamSet = OID(oid: "1.2.643.2.2.32.3", shortName: "id-GostR3410-94-CryptoPro-B-ParamSet")
    public static let id_GostR3410_94_CryptoPro_C_ParamSet = OID(oid: "1.2.643.2.2.32.4", shortName: "id-GostR3410-94-CryptoPro-C-ParamSet")
    public static let id_GostR3410_94_CryptoPro_D_ParamSet = OID(oid: "1.2.643.2.2.32.5", shortName: "id-GostR3410-94-CryptoPro-D-ParamSet")
    public static let id_GostR3410_94_CryptoPro_XchA_ParamSet = OID(oid: "1.2.643.2.2.33.1", shortName: "id-GostR3410-94-CryptoPro-XchA-ParamSet")
    public static let id_GostR3410_94_CryptoPro_XchB_ParamSet = OID(oid: "1.2.643.2.2.33.2", shortName: "id-GostR3410-94-CryptoPro-XchB-ParamSet")
    public static let id_GostR3410_94_CryptoPro_XchC_ParamSet = OID(oid: "1.2.643.2.2.33.3", shortName: "id-GostR3410-94-CryptoPro-XchC-ParamSet")
    public static let id_GostR3410_2001_TestParamSet = OID(oid: "1.2.643.2.2.35.0", shortName: "id-GostR3410-2001-TestParamSet")
    public static let id_GostR3410_2001_CryptoPro_A_ParamSet = OID(oid: "1.2.643.2.2.35.1", shortName: "id-GostR3410-2001-CryptoPro-A-ParamSet")
    public static let id_GostR3410_2001_CryptoPro_B_ParamSet = OID(oid: "1.2.643.2.2.35.2", shortName: "id-GostR3410-2001-CryptoPro-B-ParamSet")
    public static let id_GostR3410_2001_CryptoPro_C_ParamSet = OID(oid: "1.2.643.2.2.35.3", shortName: "id-GostR3410-2001-CryptoPro-C-ParamSet")
    public static let id_GostR3410_2001_CryptoPro_XchA_ParamSet = OID(oid: "1.2.643.2.2.36.0", shortName: "id-GostR3410-2001-CryptoPro-XchA-ParamSet")
    public static let id_GostR3410_2001_CryptoPro_XchB_ParamSet = OID(oid: "1.2.643.2.2.36.1", shortName: "id-GostR3410-2001-CryptoPro-XchB-ParamSet")
    public static let id_GostR3410_94_a = OID(oid: "1.2.643.2.2.20.1", shortName: "id-GostR3410-94-a")
    public static let id_GostR3410_94_aBis = OID(oid: "1.2.643.2.2.20.2", shortName: "id-GostR3410-94-aBis")
    public static let id_GostR3410_94_b = OID(oid: "1.2.643.2.2.20.3", shortName: "id-GostR3410-94-b")
    public static let id_GostR3410_94_bBis = OID(oid: "1.2.643.2.2.20.4", shortName: "id-GostR3410-94-bBis")
    public static let id_Gost28147_89_cc = OID(oid: "1.2.643.2.9.1.6.1", shortName: "id-Gost28147-89-cc", longName: "GOST 28147-89 Cryptocom ParamSet")
    public static let gost94cc = OID(oid: "1.2.643.2.9.1.5.3", shortName: "gost94cc", longName: "GOST 34.10-94 Cryptocom")
    public static let gost2001cc = OID(oid: "1.2.643.2.9.1.5.4", shortName: "gost2001cc", longName: "GOST 34.10-2001 Cryptocom")
    public static let id_GostR3411_94_with_GostR3410_94_cc = OID(oid: "1.2.643.2.9.1.3.3", shortName: "id-GostR3411-94-with-GostR3410-94-cc", longName: "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom")
    public static let id_GostR3411_94_with_GostR3410_2001_cc = OID(oid: "1.2.643.2.9.1.3.4", shortName: "id-GostR3411-94-with-GostR3410-2001-cc", longName: "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom")
    public static let id_GostR3410_2001_ParamSet_cc = OID(oid: "1.2.643.2.9.1.8.1", shortName: "id-GostR3410-2001-ParamSet-cc", longName: "GOST R 3410-2001 Parameter Set Cryptocom")
    public static let LocalKeySet = OID(oid: "1.3.6.1.4.1.311.17.2", shortName: "LocalKeySet", longName: "Microsoft Local Key set")
    public static let freshestCRL = OID(oid: "2.5.29.46", shortName: "freshestCRL", longName: "X509v3 Freshest CRL")
    public static let id_on_permanentIdentifier = OID(oid: "1.3.6.1.5.5.7.8.3", shortName: "id-on-permanentIdentifier", longName: "Permanent Identifier")
    public static let searchGuide = OID(oid: "2.5.4.14", shortName: "searchGuide")
    public static let businessCategory = OID(oid: "2.5.4.15", shortName: "businessCategory")
    public static let postalAddress = OID(oid: "2.5.4.16", shortName: "postalAddress")
    public static let postOfficeBox = OID(oid: "2.5.4.18", shortName: "postOfficeBox")
    public static let physicalDeliveryOfficeName = OID(oid: "2.5.4.19", shortName: "physicalDeliveryOfficeName")
    public static let telephoneNumber = OID(oid: "2.5.4.20", shortName: "telephoneNumber")
    public static let telexNumber = OID(oid: "2.5.4.21", shortName: "telexNumber")
    public static let teletexTerminalIdentifier = OID(oid: "2.5.4.22", shortName: "teletexTerminalIdentifier")
    public static let facsimileTelephoneNumber = OID(oid: "2.5.4.23", shortName: "facsimileTelephoneNumber")
    public static let x121Address = OID(oid: "2.5.4.24", shortName: "x121Address")
    public static let internationaliSDNNumber = OID(oid: "2.5.4.25", shortName: "internationaliSDNNumber")
    public static let registeredAddress = OID(oid: "2.5.4.26", shortName: "registeredAddress")
    public static let destinationIndicator = OID(oid: "2.5.4.27", shortName: "destinationIndicator")
    public static let preferredDeliveryMethod = OID(oid: "2.5.4.28", shortName: "preferredDeliveryMethod")
    public static let presentationAddress = OID(oid: "2.5.4.29", shortName: "presentationAddress")
    public static let supportedApplicationContext = OID(oid: "2.5.4.30", shortName: "supportedApplicationContext")
    public static let member = OID(oid: "2.5.4.31", shortName: "member")
    public static let owner = OID(oid: "2.5.4.32", shortName: "owner")
    public static let roleOccupant = OID(oid: "2.5.4.33", shortName: "roleOccupant")
    public static let seeAlso = OID(oid: "2.5.4.34", shortName: "seeAlso")
    public static let userPassword = OID(oid: "2.5.4.35", shortName: "userPassword")
    public static let userCertificate = OID(oid: "2.5.4.36", shortName: "userCertificate")
    public static let cACertificate = OID(oid: "2.5.4.37", shortName: "cACertificate")
    public static let authorityRevocationList = OID(oid: "2.5.4.38", shortName: "authorityRevocationList")
    public static let certificateRevocationList = OID(oid: "2.5.4.39", shortName: "certificateRevocationList")
    public static let crossCertificatePair = OID(oid: "2.5.4.40", shortName: "crossCertificatePair")
    public static let enhancedSearchGuide = OID(oid: "2.5.4.47", shortName: "enhancedSearchGuide")
    public static let protocolInformation = OID(oid: "2.5.4.48", shortName: "protocolInformation")
    public static let distinguishedName = OID(oid: "2.5.4.49", shortName: "distinguishedName")
    public static let uniqueMember = OID(oid: "2.5.4.50", shortName: "uniqueMember")
    public static let houseIdentifier = OID(oid: "2.5.4.51", shortName: "houseIdentifier")
    public static let supportedAlgorithms = OID(oid: "2.5.4.52", shortName: "supportedAlgorithms")
    public static let deltaRevocationList = OID(oid: "2.5.4.53", shortName: "deltaRevocationList")
    public static let dmdName = OID(oid: "2.5.4.54", shortName: "dmdName")
    public static let id_alg_PWRI_KEK = OID(oid: "1.2.840.113549.1.9.16.3.9", shortName: "id-alg-PWRI-KEK")
    public static let id_aes128_GCM = OID(oid: "2.16.840.1.101.3.4.1.6", shortName: "id-aes128-GCM", longName: "aes-128-gcm")
    public static let id_aes128_CCM = OID(oid: "2.16.840.1.101.3.4.1.7", shortName: "id-aes128-CCM", longName: "aes-128-ccm")
    public static let id_aes128_wrap_pad = OID(oid: "2.16.840.1.101.3.4.1.8", shortName: "id-aes128-wrap-pad")
    public static let id_aes192_GCM = OID(oid: "2.16.840.1.101.3.4.1.26", shortName: "id-aes192-GCM", longName: "aes-192-gcm")
    public static let id_aes192_CCM = OID(oid: "2.16.840.1.101.3.4.1.27", shortName: "id-aes192-CCM", longName: "aes-192-ccm")
    public static let id_aes192_wrap_pad = OID(oid: "2.16.840.1.101.3.4.1.28", shortName: "id-aes192-wrap-pad")
    public static let id_aes256_GCM = OID(oid: "2.16.840.1.101.3.4.1.46", shortName: "id-aes256-GCM", longName: "aes-256-gcm")
    public static let id_aes256_CCM = OID(oid: "2.16.840.1.101.3.4.1.47", shortName: "id-aes256-CCM", longName: "aes-256-ccm")
    public static let id_aes256_wrap_pad = OID(oid: "2.16.840.1.101.3.4.1.48", shortName: "id-aes256-wrap-pad")
    public static let id_camellia128_wrap = OID(oid: "1.2.392.200011.61.1.1.3.2", shortName: "id-camellia128-wrap")
    public static let id_camellia192_wrap = OID(oid: "1.2.392.200011.61.1.1.3.3", shortName: "id-camellia192-wrap")
    public static let id_camellia256_wrap = OID(oid: "1.2.392.200011.61.1.1.3.4", shortName: "id-camellia256-wrap")
    public static let anyExtendedKeyUsage = OID(oid: "2.5.29.37.0", shortName: "anyExtendedKeyUsage", longName: "Any Extended Key Usage")
    public static let MGF1 = OID(oid: "1.2.840.113549.1.1.8", shortName: "MGF1", longName: "mgf1")
    public static let RSASSA_PSS = OID(oid: "1.2.840.113549.1.1.10", shortName: "RSASSA-PSS", longName: "rsassaPss")
    public static let AES_128_XTS = OID(oid: "1.3.111.2.1619.0.1.1", shortName: "AES-128-XTS", longName: "aes-128-xts")
    public static let AES_256_XTS = OID(oid: "1.3.111.2.1619.0.1.2", shortName: "AES-256-XTS", longName: "aes-256-xts")
    public static let RSAES_OAEP = OID(oid: "1.2.840.113549.1.1.7", shortName: "RSAES-OAEP", longName: "rsaesOaep")
    public static let dhpublicnumber = OID(oid: "1.2.840.10046.2.1", shortName: "dhpublicnumber", longName: "X9.42 DH")
    public static let brainpoolP160r1 = OID(oid: "1.3.36.3.3.2.8.1.1.1", shortName: "brainpoolP160r1")
    public static let brainpoolP160t1 = OID(oid: "1.3.36.3.3.2.8.1.1.2", shortName: "brainpoolP160t1")
    public static let brainpoolP192r1 = OID(oid: "1.3.36.3.3.2.8.1.1.3", shortName: "brainpoolP192r1")
    public static let brainpoolP192t1 = OID(oid: "1.3.36.3.3.2.8.1.1.4", shortName: "brainpoolP192t1")
    public static let brainpoolP224r1 = OID(oid: "1.3.36.3.3.2.8.1.1.5", shortName: "brainpoolP224r1")
    public static let brainpoolP224t1 = OID(oid: "1.3.36.3.3.2.8.1.1.6", shortName: "brainpoolP224t1")
    public static let brainpoolP256r1 = OID(oid: "1.3.36.3.3.2.8.1.1.7", shortName: "brainpoolP256r1")
    public static let brainpoolP256t1 = OID(oid: "1.3.36.3.3.2.8.1.1.8", shortName: "brainpoolP256t1")
    public static let brainpoolP320r1 = OID(oid: "1.3.36.3.3.2.8.1.1.9", shortName: "brainpoolP320r1")
    public static let brainpoolP320t1 = OID(oid: "1.3.36.3.3.2.8.1.1.10", shortName: "brainpoolP320t1")
    public static let brainpoolP384r1 = OID(oid: "1.3.36.3.3.2.8.1.1.11", shortName: "brainpoolP384r1")
    public static let brainpoolP384t1 = OID(oid: "1.3.36.3.3.2.8.1.1.12", shortName: "brainpoolP384t1")
    public static let brainpoolP512r1 = OID(oid: "1.3.36.3.3.2.8.1.1.13", shortName: "brainpoolP512r1")
    public static let brainpoolP512t1 = OID(oid: "1.3.36.3.3.2.8.1.1.14", shortName: "brainpoolP512t1")
    public static let PSPECIFIED = OID(oid: "1.2.840.113549.1.1.9", shortName: "PSPECIFIED", longName: "pSpecified")
    public static let dhSinglePass_stdDH_sha1kdf_scheme = OID(oid: "1.3.133.16.840.63.0.2", shortName: "dhSinglePass-stdDH-sha1kdf-scheme")
    public static let dhSinglePass_stdDH_sha224kdf_scheme = OID(oid: "1.3.132.1.11.0", shortName: "dhSinglePass-stdDH-sha224kdf-scheme")
    public static let dhSinglePass_stdDH_sha256kdf_scheme = OID(oid: "1.3.132.1.11.1", shortName: "dhSinglePass-stdDH-sha256kdf-scheme")
    public static let dhSinglePass_stdDH_sha384kdf_scheme = OID(oid: "1.3.132.1.11.2", shortName: "dhSinglePass-stdDH-sha384kdf-scheme")
    public static let dhSinglePass_stdDH_sha512kdf_scheme = OID(oid: "1.3.132.1.11.3", shortName: "dhSinglePass-stdDH-sha512kdf-scheme")
    public static let dhSinglePass_cofactorDH_sha1kdf_scheme = OID(oid: "1.3.133.16.840.63.0.3", shortName: "dhSinglePass-cofactorDH-sha1kdf-scheme")
    public static let dhSinglePass_cofactorDH_sha224kdf_scheme = OID(oid: "1.3.132.1.14.0", shortName: "dhSinglePass-cofactorDH-sha224kdf-scheme")
    public static let dhSinglePass_cofactorDH_sha256kdf_scheme = OID(oid: "1.3.132.1.14.1", shortName: "dhSinglePass-cofactorDH-sha256kdf-scheme")
    public static let dhSinglePass_cofactorDH_sha384kdf_scheme = OID(oid: "1.3.132.1.14.2", shortName: "dhSinglePass-cofactorDH-sha384kdf-scheme")
    public static let dhSinglePass_cofactorDH_sha512kdf_scheme = OID(oid: "1.3.132.1.14.3", shortName: "dhSinglePass-cofactorDH-sha512kdf-scheme")
    public static let ct_precert_scts = OID(oid: "1.3.6.1.4.1.11129.2.4.2", shortName: "ct_precert_scts", longName: "CT Precertificate SCTs")
    public static let ct_precert_poison = OID(oid: "1.3.6.1.4.1.11129.2.4.3", shortName: "ct_precert_poison", longName: "CT Precertificate Poison")
    public static let ct_precert_signer = OID(oid: "1.3.6.1.4.1.11129.2.4.4", shortName: "ct_precert_signer", longName: "CT Precertificate Signer")
    public static let ct_cert_scts = OID(oid: "1.3.6.1.4.1.11129.2.4.5", shortName: "ct_cert_scts", longName: "CT Certificate SCTs")
    public static let jurisdictionL = OID(oid: "1.3.6.1.4.1.311.60.2.1.1", shortName: "jurisdictionL", longName: "jurisdictionLocalityName")
    public static let jurisdictionST = OID(oid: "1.3.6.1.4.1.311.60.2.1.2", shortName: "jurisdictionST", longName: "jurisdictionStateOrProvinceName")
    public static let jurisdictionC = OID(oid: "1.3.6.1.4.1.311.60.2.1.3", shortName: "jurisdictionC", longName: "jurisdictionCountryName")
    public static let CAMELLIA_128_GCM = OID(oid: "0.3.4401.5.3.1.9.6", shortName: "CAMELLIA-128-GCM", longName: "camellia-128-gcm")
    public static let CAMELLIA_128_CCM = OID(oid: "0.3.4401.5.3.1.9.7", shortName: "CAMELLIA-128-CCM", longName: "camellia-128-ccm")
    public static let CAMELLIA_128_CTR = OID(oid: "0.3.4401.5.3.1.9.9", shortName: "CAMELLIA-128-CTR", longName: "camellia-128-ctr")
    public static let CAMELLIA_128_CMAC = OID(oid: "0.3.4401.5.3.1.9.10", shortName: "CAMELLIA-128-CMAC", longName: "camellia-128-cmac")
    public static let CAMELLIA_192_GCM = OID(oid: "0.3.4401.5.3.1.9.26", shortName: "CAMELLIA-192-GCM", longName: "camellia-192-gcm")
    public static let CAMELLIA_192_CCM = OID(oid: "0.3.4401.5.3.1.9.27", shortName: "CAMELLIA-192-CCM", longName: "camellia-192-ccm")
    public static let CAMELLIA_192_CTR = OID(oid: "0.3.4401.5.3.1.9.29", shortName: "CAMELLIA-192-CTR", longName: "camellia-192-ctr")
    public static let CAMELLIA_192_CMAC = OID(oid: "0.3.4401.5.3.1.9.30", shortName: "CAMELLIA-192-CMAC", longName: "camellia-192-cmac")
    public static let CAMELLIA_256_GCM = OID(oid: "0.3.4401.5.3.1.9.46", shortName: "CAMELLIA-256-GCM", longName: "camellia-256-gcm")
    public static let CAMELLIA_256_CCM = OID(oid: "0.3.4401.5.3.1.9.47", shortName: "CAMELLIA-256-CCM", longName: "camellia-256-ccm")
    public static let CAMELLIA_256_CTR = OID(oid: "0.3.4401.5.3.1.9.49", shortName: "CAMELLIA-256-CTR", longName: "camellia-256-ctr")
    public static let CAMELLIA_256_CMAC = OID(oid: "0.3.4401.5.3.1.9.50", shortName: "CAMELLIA-256-CMAC", longName: "camellia-256-cmac")
    public static let id_scrypt = OID(oid: "1.3.6.1.4.1.11591.4.11", shortName: "id-scrypt", longName: "scrypt")
    public static let id_tc26 = OID(oid: "1.2.643.7.1", shortName: "id-tc26")
    public static let id_tc26_algorithms = OID(oid: "1.2.643.7.1.1", shortName: "id-tc26-algorithms")
    public static let id_tc26_sign = OID(oid: "1.2.643.7.1.1.1", shortName: "id-tc26-sign")
    public static let gost2012_256 = OID(oid: "1.2.643.7.1.1.1.1", shortName: "gost2012_256", longName: "GOST R 34.10-2012 with 256 bit modulus")
    public static let gost2012_512 = OID(oid: "1.2.643.7.1.1.1.2", shortName: "gost2012_512", longName: "GOST R 34.10-2012 with 512 bit modulus")
    public static let id_tc26_digest = OID(oid: "1.2.643.7.1.1.2", shortName: "id-tc26-digest")
    public static let md_gost12_256 = OID(oid: "1.2.643.7.1.1.2.2", shortName: "md_gost12_256", longName: "GOST R 34.11-2012 with 256 bit hash")
    public static let md_gost12_512 = OID(oid: "1.2.643.7.1.1.2.3", shortName: "md_gost12_512", longName: "GOST R 34.11-2012 with 512 bit hash")
    public static let id_tc26_signwithdigest = OID(oid: "1.2.643.7.1.1.3", shortName: "id-tc26-signwithdigest")
    public static let id_tc26_signwithdigest_gost3410_2012_256 = OID(oid: "1.2.643.7.1.1.3.2", shortName: "id-tc26-signwithdigest-gost3410-2012-256", longName: "GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)")
    public static let id_tc26_signwithdigest_gost3410_2012_512 = OID(oid: "1.2.643.7.1.1.3.3", shortName: "id-tc26-signwithdigest-gost3410-2012-512", longName: "GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)")
    public static let id_tc26_mac = OID(oid: "1.2.643.7.1.1.4", shortName: "id-tc26-mac")
    public static let id_tc26_hmac_gost_3411_2012_256 = OID(oid: "1.2.643.7.1.1.4.1", shortName: "id-tc26-hmac-gost-3411-2012-256", longName: "HMAC GOST 34.11-2012 256 bit")
    public static let id_tc26_hmac_gost_3411_2012_512 = OID(oid: "1.2.643.7.1.1.4.2", shortName: "id-tc26-hmac-gost-3411-2012-512", longName: "HMAC GOST 34.11-2012 512 bit")
    public static let id_tc26_cipher = OID(oid: "1.2.643.7.1.1.5", shortName: "id-tc26-cipher")
    public static let id_tc26_agreement = OID(oid: "1.2.643.7.1.1.6", shortName: "id-tc26-agreement")
    public static let id_tc26_agreement_gost_3410_2012_256 = OID(oid: "1.2.643.7.1.1.6.1", shortName: "id-tc26-agreement-gost-3410-2012-256")
    public static let id_tc26_agreement_gost_3410_2012_512 = OID(oid: "1.2.643.7.1.1.6.2", shortName: "id-tc26-agreement-gost-3410-2012-512")
    public static let id_tc26_constants = OID(oid: "1.2.643.7.1.2", shortName: "id-tc26-constants")
    public static let id_tc26_sign_constants = OID(oid: "1.2.643.7.1.2.1", shortName: "id-tc26-sign-constants")
    public static let id_tc26_gost_3410_2012_512_constants = OID(oid: "1.2.643.7.1.2.1.2", shortName: "id-tc26-gost-3410-2012-512-constants")
    public static let id_tc26_gost_3410_2012_512_paramSetTest = OID(oid: "1.2.643.7.1.2.1.2.0", shortName: "id-tc26-gost-3410-2012-512-paramSetTest", longName: "GOST R 34.10-2012 (512 bit) testing parameter set")
    public static let id_tc26_gost_3410_2012_512_paramSetA = OID(oid: "1.2.643.7.1.2.1.2.1", shortName: "id-tc26-gost-3410-2012-512-paramSetA", longName: "GOST R 34.10-2012 (512 bit) ParamSet A")
    public static let id_tc26_gost_3410_2012_512_paramSetB = OID(oid: "1.2.643.7.1.2.1.2.2", shortName: "id-tc26-gost-3410-2012-512-paramSetB", longName: "GOST R 34.10-2012 (512 bit) ParamSet B")
    public static let id_tc26_digest_constants = OID(oid: "1.2.643.7.1.2.2", shortName: "id-tc26-digest-constants")
    public static let id_tc26_cipher_constants = OID(oid: "1.2.643.7.1.2.5", shortName: "id-tc26-cipher-constants")
    public static let id_tc26_gost_28147_constants = OID(oid: "1.2.643.7.1.2.5.1", shortName: "id-tc26-gost-28147-constants")
    public static let id_tc26_gost_28147_param_Z = OID(oid: "1.2.643.7.1.2.5.1.1", shortName: "id-tc26-gost-28147-param-Z", longName: "GOST 28147-89 TC26 parameter set")
    public static let INN = OID(oid: "1.2.643.3.131.1.1", shortName: "INN")
    public static let OGRN = OID(oid: "1.2.643.100.1", shortName: "OGRN")
    public static let SNILS = OID(oid: "1.2.643.100.3", shortName: "SNILS")
    public static let subjectSignTool = OID(oid: "1.2.643.100.111", shortName: "subjectSignTool", longName: "Signing Tool of Subject")
    public static let issuerSignTool = OID(oid: "1.2.643.100.112", shortName: "issuerSignTool", longName: "Signing Tool of Issuer")
    public static let tlsfeature = OID(oid: "1.3.6.1.5.5.7.1.24", shortName: "tlsfeature", longName: "TLS Feature")
    public static let ipsecIKE = OID(oid: "1.3.6.1.5.5.7.3.17", shortName: "ipsecIKE", longName: "ipsec Internet Key Exchange")
    public static let capwapAC = OID(oid: "1.3.6.1.5.5.7.3.18", shortName: "capwapAC", longName: "Ctrl/provision WAP Access")
    public static let capwapWTP = OID(oid: "1.3.6.1.5.5.7.3.19", shortName: "capwapWTP", longName: "Ctrl/Provision WAP Termination")
    public static let secureShellClient = OID(oid: "1.3.6.1.5.5.7.3.21", shortName: "secureShellClient", longName: "SSH Client")
    public static let secureShellServer = OID(oid: "1.3.6.1.5.5.7.3.22", shortName: "secureShellServer", longName: "SSH Server")
    public static let sendRouter = OID(oid: "1.3.6.1.5.5.7.3.23", shortName: "sendRouter", longName: "Send Router")
    public static let sendProxiedRouter = OID(oid: "1.3.6.1.5.5.7.3.24", shortName: "sendProxiedRouter", longName: "Send Proxied Router")
    public static let sendOwner = OID(oid: "1.3.6.1.5.5.7.3.25", shortName: "sendOwner", longName: "Send Owner")
    public static let sendProxiedOwner = OID(oid: "1.3.6.1.5.5.7.3.26", shortName: "sendProxiedOwner", longName: "Send Proxied Owner")
    public static let id_pkinit = OID(oid: "1.3.6.1.5.2.3", shortName: "id-pkinit")
    public static let pkInitClientAuth = OID(oid: "1.3.6.1.5.2.3.4", shortName: "pkInitClientAuth", longName: "PKINIT Client Auth")
    public static let pkInitKDC = OID(oid: "1.3.6.1.5.2.3.5", shortName: "pkInitKDC", longName: "Signing KDC Response")
    public static let X25519 = OID(oid: "1.3.101.110", shortName: "X25519")
    public static let X448 = OID(oid: "1.3.101.111", shortName: "X448")
    public static let BLAKE2b512 = OID(oid: "1.3.6.1.4.1.1722.12.2.1.16", shortName: "BLAKE2b512", longName: "blake2b512")
    public static let BLAKE2s256 = OID(oid: "1.3.6.1.4.1.1722.12.2.2.8", shortName: "BLAKE2s256", longName: "blake2s256")
    public static let id_smime_ct_contentCollection = OID(oid: "1.2.840.113549.1.9.16.1.19", shortName: "id-smime-ct-contentCollection")
    public static let id_smime_ct_authEnvelopedData = OID(oid: "1.2.840.113549.1.9.16.1.23", shortName: "id-smime-ct-authEnvelopedData")
    public static let id_ct_xml = OID(oid: "1.2.840.113549.1.9.16.1.28", shortName: "id-ct-xml")
    public static let ARIA_128_ECB = OID(oid: "1.2.410.200046.1.1.1", shortName: "ARIA-128-ECB", longName: "aria-128-ecb")
    public static let ARIA_128_CBC = OID(oid: "1.2.410.200046.1.1.2", shortName: "ARIA-128-CBC", longName: "aria-128-cbc")
    public static let ARIA_128_CFB = OID(oid: "1.2.410.200046.1.1.3", shortName: "ARIA-128-CFB", longName: "aria-128-cfb")
    public static let ARIA_128_OFB = OID(oid: "1.2.410.200046.1.1.4", shortName: "ARIA-128-OFB", longName: "aria-128-ofb")
    public static let ARIA_128_CTR = OID(oid: "1.2.410.200046.1.1.5", shortName: "ARIA-128-CTR", longName: "aria-128-ctr")
    public static let ARIA_192_ECB = OID(oid: "1.2.410.200046.1.1.6", shortName: "ARIA-192-ECB", longName: "aria-192-ecb")
    public static let ARIA_192_CBC = OID(oid: "1.2.410.200046.1.1.7", shortName: "ARIA-192-CBC", longName: "aria-192-cbc")
    public static let ARIA_192_CFB = OID(oid: "1.2.410.200046.1.1.8", shortName: "ARIA-192-CFB", longName: "aria-192-cfb")
    public static let ARIA_192_OFB = OID(oid: "1.2.410.200046.1.1.9", shortName: "ARIA-192-OFB", longName: "aria-192-ofb")
    public static let ARIA_192_CTR = OID(oid: "1.2.410.200046.1.1.10", shortName: "ARIA-192-CTR", longName: "aria-192-ctr")
    public static let ARIA_256_ECB = OID(oid: "1.2.410.200046.1.1.11", shortName: "ARIA-256-ECB", longName: "aria-256-ecb")
    public static let ARIA_256_CBC = OID(oid: "1.2.410.200046.1.1.12", shortName: "ARIA-256-CBC", longName: "aria-256-cbc")
    public static let ARIA_256_CFB = OID(oid: "1.2.410.200046.1.1.13", shortName: "ARIA-256-CFB", longName: "aria-256-cfb")
    public static let ARIA_256_OFB = OID(oid: "1.2.410.200046.1.1.14", shortName: "ARIA-256-OFB", longName: "aria-256-ofb")
    public static let ARIA_256_CTR = OID(oid: "1.2.410.200046.1.1.15", shortName: "ARIA-256-CTR", longName: "aria-256-ctr")
    public static let id_smime_aa_signingCertificateV2 = OID(oid: "1.2.840.113549.1.9.16.2.47", shortName: "id-smime-aa-signingCertificateV2")
    public static let ED25519 = OID(oid: "1.3.101.112", shortName: "ED25519")
    public static let ED448 = OID(oid: "1.3.101.113", shortName: "ED448")
    public static let organizationIdentifier = OID(oid: "2.5.4.97", shortName: "organizationIdentifier")
    public static let c3 = OID(oid: "2.5.4.98", shortName: "c3", longName: "countryCode3c")
    public static let n3 = OID(oid: "2.5.4.99", shortName: "n3", longName: "countryCode3n")
    public static let dnsName = OID(oid: "2.5.4.100", shortName: "dnsName")
    public static let x509ExtAdmission = OID(oid: "1.3.36.8.3.3", shortName: "x509ExtAdmission", longName: "Professional Information or basis for Admission")
    public static let SHA512_224 = OID(oid: "2.16.840.1.101.3.4.2.5", shortName: "SHA512-224", longName: "sha512-224")
    public static let SHA512_256 = OID(oid: "2.16.840.1.101.3.4.2.6", shortName: "SHA512-256", longName: "sha512-256")
    public static let SHA3_224 = OID(oid: "2.16.840.1.101.3.4.2.7", shortName: "SHA3-224", longName: "sha3-224")
    public static let SHA3_256 = OID(oid: "2.16.840.1.101.3.4.2.8", shortName: "SHA3-256", longName: "sha3-256")
    public static let SHA3_384 = OID(oid: "2.16.840.1.101.3.4.2.9", shortName: "SHA3-384", longName: "sha3-384")
    public static let SHA3_512 = OID(oid: "2.16.840.1.101.3.4.2.10", shortName: "SHA3-512", longName: "sha3-512")
    public static let SHAKE128 = OID(oid: "2.16.840.1.101.3.4.2.11", shortName: "SHAKE128", longName: "shake128")
    public static let SHAKE256 = OID(oid: "2.16.840.1.101.3.4.2.12", shortName: "SHAKE256", longName: "shake256")
    public static let id_hmacWithSHA3_224 = OID(oid: "2.16.840.1.101.3.4.2.13", shortName: "id-hmacWithSHA3-224", longName: "hmac-sha3-224")
    public static let id_hmacWithSHA3_256 = OID(oid: "2.16.840.1.101.3.4.2.14", shortName: "id-hmacWithSHA3-256", longName: "hmac-sha3-256")
    public static let id_hmacWithSHA3_384 = OID(oid: "2.16.840.1.101.3.4.2.15", shortName: "id-hmacWithSHA3-384", longName: "hmac-sha3-384")
    public static let id_hmacWithSHA3_512 = OID(oid: "2.16.840.1.101.3.4.2.16", shortName: "id-hmacWithSHA3-512", longName: "hmac-sha3-512")
    public static let id_dsa_with_sha384 = OID(oid: "2.16.840.1.101.3.4.3.3", shortName: "id-dsa-with-sha384", longName: "dsa_with_SHA384")
    public static let id_dsa_with_sha512 = OID(oid: "2.16.840.1.101.3.4.3.4", shortName: "id-dsa-with-sha512", longName: "dsa_with_SHA512")
    public static let id_dsa_with_sha3_224 = OID(oid: "2.16.840.1.101.3.4.3.5", shortName: "id-dsa-with-sha3-224", longName: "dsa_with_SHA3-224")
    public static let id_dsa_with_sha3_256 = OID(oid: "2.16.840.1.101.3.4.3.6", shortName: "id-dsa-with-sha3-256", longName: "dsa_with_SHA3-256")
    public static let id_dsa_with_sha3_384 = OID(oid: "2.16.840.1.101.3.4.3.7", shortName: "id-dsa-with-sha3-384", longName: "dsa_with_SHA3-384")
    public static let id_dsa_with_sha3_512 = OID(oid: "2.16.840.1.101.3.4.3.8", shortName: "id-dsa-with-sha3-512", longName: "dsa_with_SHA3-512")
    public static let id_ecdsa_with_sha3_224 = OID(oid: "2.16.840.1.101.3.4.3.9", shortName: "id-ecdsa-with-sha3-224", longName: "ecdsa_with_SHA3-224")
    public static let id_ecdsa_with_sha3_256 = OID(oid: "2.16.840.1.101.3.4.3.10", shortName: "id-ecdsa-with-sha3-256", longName: "ecdsa_with_SHA3-256")
    public static let id_ecdsa_with_sha3_384 = OID(oid: "2.16.840.1.101.3.4.3.11", shortName: "id-ecdsa-with-sha3-384", longName: "ecdsa_with_SHA3-384")
    public static let id_ecdsa_with_sha3_512 = OID(oid: "2.16.840.1.101.3.4.3.12", shortName: "id-ecdsa-with-sha3-512", longName: "ecdsa_with_SHA3-512")
    public static let id_rsassa_pkcs1_v1_5_with_sha3_224 = OID(oid: "2.16.840.1.101.3.4.3.13", shortName: "id-rsassa-pkcs1-v1_5-with-sha3-224", longName: "RSA-SHA3-224")
    public static let id_rsassa_pkcs1_v1_5_with_sha3_256 = OID(oid: "2.16.840.1.101.3.4.3.14", shortName: "id-rsassa-pkcs1-v1_5-with-sha3-256", longName: "RSA-SHA3-256")
    public static let id_rsassa_pkcs1_v1_5_with_sha3_384 = OID(oid: "2.16.840.1.101.3.4.3.15", shortName: "id-rsassa-pkcs1-v1_5-with-sha3-384", longName: "RSA-SHA3-384")
    public static let id_rsassa_pkcs1_v1_5_with_sha3_512 = OID(oid: "2.16.840.1.101.3.4.3.16", shortName: "id-rsassa-pkcs1-v1_5-with-sha3-512", longName: "RSA-SHA3-512")
    public static let ARIA_128_CCM = OID(oid: "1.2.410.200046.1.1.37", shortName: "ARIA-128-CCM", longName: "aria-128-ccm")
    public static let ARIA_192_CCM = OID(oid: "1.2.410.200046.1.1.38", shortName: "ARIA-192-CCM", longName: "aria-192-ccm")
    public static let ARIA_256_CCM = OID(oid: "1.2.410.200046.1.1.39", shortName: "ARIA-256-CCM", longName: "aria-256-ccm")
    public static let ARIA_128_GCM = OID(oid: "1.2.410.200046.1.1.34", shortName: "ARIA-128-GCM", longName: "aria-128-gcm")
    public static let ARIA_192_GCM = OID(oid: "1.2.410.200046.1.1.35", shortName: "ARIA-192-GCM", longName: "aria-192-gcm")
    public static let ARIA_256_GCM = OID(oid: "1.2.410.200046.1.1.36", shortName: "ARIA-256-GCM", longName: "aria-256-gcm")
    public static let cmcCA = OID(oid: "1.3.6.1.5.5.7.3.27", shortName: "cmcCA", longName: "CMC Certificate Authority")
    public static let cmcRA = OID(oid: "1.3.6.1.5.5.7.3.28", shortName: "cmcRA", longName: "CMC Registration Authority")
    public static let SM4_ECB = OID(oid: "1.2.156.10197.1.104.1", shortName: "SM4-ECB", longName: "sm4-ecb")
    public static let SM4_CBC = OID(oid: "1.2.156.10197.1.104.2", shortName: "SM4-CBC", longName: "sm4-cbc")
    public static let SM4_OFB = OID(oid: "1.2.156.10197.1.104.3", shortName: "SM4-OFB", longName: "sm4-ofb")
    public static let SM4_CFB1 = OID(oid: "1.2.156.10197.1.104.5", shortName: "SM4-CFB1", longName: "sm4-cfb1")
    public static let SM4_CFB = OID(oid: "1.2.156.10197.1.104.4", shortName: "SM4-CFB", longName: "sm4-cfb")
    public static let SM4_CFB8 = OID(oid: "1.2.156.10197.1.104.6", shortName: "SM4-CFB8", longName: "sm4-cfb8")
    public static let SM4_CTR = OID(oid: "1.2.156.10197.1.104.7", shortName: "SM4-CTR", longName: "sm4-ctr")
    public static let ISO_CN = OID(oid: "1.2.156", shortName: "ISO-CN", longName: "ISO CN Member Body")
    public static let oscca = OID(oid: "1.2.156.10197", shortName: "oscca")
    public static let sm_scheme = OID(oid: "1.2.156.10197.1", shortName: "sm-scheme")
    public static let SM3 = OID(oid: "1.2.156.10197.1.401", shortName: "SM3", longName: "sm3")
    public static let RSA_SM3 = OID(oid: "1.2.156.10197.1.504", shortName: "RSA-SM3", longName: "sm3WithRSAEncryption")
    public static let RSA_SHA512_224 = OID(oid: "1.2.840.113549.1.1.15", shortName: "RSA-SHA512/224", longName: "sha512-224WithRSAEncryption")
    public static let RSA_SHA512_256 = OID(oid: "1.2.840.113549.1.1.16", shortName: "RSA-SHA512/256", longName: "sha512-256WithRSAEncryption")
    public static let id_tc26_gost_3410_2012_256_constants = OID(oid: "1.2.643.7.1.2.1.1", shortName: "id-tc26-gost-3410-2012-256-constants")
    public static let id_tc26_gost_3410_2012_256_paramSetA = OID(oid: "1.2.643.7.1.2.1.1.1", shortName: "id-tc26-gost-3410-2012-256-paramSetA", longName: "GOST R 34.10-2012 (256 bit) ParamSet A")
    public static let id_tc26_gost_3410_2012_512_paramSetC = OID(oid: "1.2.643.7.1.2.1.2.3", shortName: "id-tc26-gost-3410-2012-512-paramSetC", longName: "GOST R 34.10-2012 (512 bit) ParamSet C")
    public static let ISO_UA = OID(oid: "1.2.804", shortName: "ISO-UA")
    public static let ua_pki = OID(oid: "1.2.804.2.1.1.1", shortName: "ua-pki")
    public static let dstu28147 = OID(oid: "1.2.804.2.1.1.1.1.1.1", shortName: "dstu28147", longName: "DSTU Gost 28147-2009")
    public static let dstu28147_ofb = OID(oid: "1.2.804.2.1.1.1.1.1.1.2", shortName: "dstu28147-ofb", longName: "DSTU Gost 28147-2009 OFB mode")
    public static let dstu28147_cfb = OID(oid: "1.2.804.2.1.1.1.1.1.1.3", shortName: "dstu28147-cfb", longName: "DSTU Gost 28147-2009 CFB mode")
    public static let dstu28147_wrap = OID(oid: "1.2.804.2.1.1.1.1.1.1.5", shortName: "dstu28147-wrap", longName: "DSTU Gost 28147-2009 key wrap")
    public static let hmacWithDstu34311 = OID(oid: "1.2.804.2.1.1.1.1.1.2", shortName: "hmacWithDstu34311", longName: "HMAC DSTU Gost 34311-95")
    public static let dstu34311 = OID(oid: "1.2.804.2.1.1.1.1.2.1", shortName: "dstu34311", longName: "DSTU Gost 34311-95")
    public static let dstu4145le = OID(oid: "1.2.804.2.1.1.1.1.3.1.1", shortName: "dstu4145le", longName: "DSTU 4145-2002 little endian")
    public static let dstu4145be = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.1.1", shortName: "dstu4145be", longName: "DSTU 4145-2002 big endian")
    public static let uacurve0 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.0", shortName: "uacurve0", longName: "DSTU curve 0")
    public static let uacurve1 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.1", shortName: "uacurve1", longName: "DSTU curve 1")
    public static let uacurve2 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.2", shortName: "uacurve2", longName: "DSTU curve 2")
    public static let uacurve3 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.3", shortName: "uacurve3", longName: "DSTU curve 3")
    public static let uacurve4 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.4", shortName: "uacurve4", longName: "DSTU curve 4")
    public static let uacurve5 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.5", shortName: "uacurve5", longName: "DSTU curve 5")
    public static let uacurve6 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.6", shortName: "uacurve6", longName: "DSTU curve 6")
    public static let uacurve7 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.7", shortName: "uacurve7", longName: "DSTU curve 7")
    public static let uacurve8 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.8", shortName: "uacurve8", longName: "DSTU curve 8")
    public static let uacurve9 = OID(oid: "1.2.804.2.1.1.1.1.3.1.1.2.9", shortName: "uacurve9", longName: "DSTU curve 9")
    public static let ieee = OID(oid: "1.3.111", shortName: "ieee")
    public static let ieee_siswg = OID(oid: "1.3.111.2.1619", shortName: "ieee-siswg", longName: "IEEE Security in Storage Working Group")
    public static let SM2 = OID(oid: "1.2.156.10197.1.301", shortName: "SM2", longName: "sm2")
    public static let id_tc26_cipher_gostr3412_2015_magma = OID(oid: "1.2.643.7.1.1.5.1", shortName: "id-tc26-cipher-gostr3412-2015-magma")
    public static let id_tc26_cipher_gostr3412_2015_magma_ctracpkm = OID(oid: "1.2.643.7.1.1.5.1.1", shortName: "id-tc26-cipher-gostr3412-2015-magma-ctracpkm")
    public static let id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = OID(oid: "1.2.643.7.1.1.5.1.2", shortName: "id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac")
    public static let id_tc26_cipher_gostr3412_2015_kuznyechik = OID(oid: "1.2.643.7.1.1.5.2", shortName: "id-tc26-cipher-gostr3412-2015-kuznyechik")
    public static let id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = OID(oid: "1.2.643.7.1.1.5.2.1", shortName: "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm")
    public static let id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = OID(oid: "1.2.643.7.1.1.5.2.2", shortName: "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac")
    public static let id_tc26_wrap = OID(oid: "1.2.643.7.1.1.7", shortName: "id-tc26-wrap")
    public static let id_tc26_wrap_gostr3412_2015_magma = OID(oid: "1.2.643.7.1.1.7.1", shortName: "id-tc26-wrap-gostr3412-2015-magma")
    public static let id_tc26_wrap_gostr3412_2015_magma_kexp15 = OID(oid: "1.2.643.7.1.1.7.1.1", shortName: "id-tc26-wrap-gostr3412-2015-magma-kexp15")
    public static let id_tc26_wrap_gostr3412_2015_kuznyechik = OID(oid: "1.2.643.7.1.1.7.2", shortName: "id-tc26-wrap-gostr3412-2015-kuznyechik")
    public static let id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = OID(oid: "1.2.643.7.1.1.7.1.1", shortName: "id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15")
    public static let id_tc26_gost_3410_2012_256_paramSetB = OID(oid: "1.2.643.7.1.2.1.1.2", shortName: "id-tc26-gost-3410-2012-256-paramSetB", longName: "GOST R 34.10-2012 (256 bit) ParamSet B")
    public static let id_tc26_gost_3410_2012_256_paramSetC = OID(oid: "1.2.643.7.1.2.1.1.3", shortName: "id-tc26-gost-3410-2012-256-paramSetC", longName: "GOST R 34.10-2012 (256 bit) ParamSet C")
    public static let id_tc26_gost_3410_2012_256_paramSetD = OID(oid: "1.2.643.7.1.2.1.1.4", shortName: "id-tc26-gost-3410-2012-256-paramSetD", longName: "GOST R 34.10-2012 (256 bit) ParamSet D")
    public static let hmacWithSHA512_224 = OID(oid: "1.2.840.113549.2.12", shortName: "hmacWithSHA512-224")
    public static let hmacWithSHA512_256 = OID(oid: "1.2.840.113549.2.13", shortName: "hmacWithSHA512-256")
    
    public static let callsign = OID(oid: "1.3.6.1.4.1.12348.1.1", shortName: "callsign", longName: "callsign", comment: "Callsign for identification in Logbook of the World ")
    
    
}
