//
//  AppReceiptTests.swift
//  ASN1CodableTests
//
//  Created by Weston Bustraan on 1/3/25.
//

import XCTest
@testable import ASN1Codable

final class AppReceiptTests: XCTestCase {



    func testDecodeGarageBandReceipt() throws {
        
        let receiptPath = Bundle.module.path(forResource: "gb_receipt", ofType: "der")!
        let receiptData = try Data(contentsOf: URL(fileURLWithPath: receiptPath))
        
        let decoder = DERDecoder()
        let pkcs7 = try decoder.decode(PKCS7Container.self, from: receiptData)
        
        
        XCTAssertEqual(pkcs7.data.count, 505)
        
        let receipt = try XCTUnwrap(pkcs7.getContent(as: AppReceipt.self))
        
        for attr in receipt.attributes{
            
            switch attr.type {
            case 14: XCTAssertEqual(attr.intValue, 1)
            case 25: XCTAssertEqual(attr.intValue, 2)
            case 10: XCTAssertEqual(attr.stringValue, "4+")
            case 11: XCTAssertEqual(attr.intValue, 2003)
            case 13: XCTAssertEqual(attr.intValue, 130000)
            case 1: XCTAssertEqual(attr.intValue, 682658836)
            case 9: XCTAssertEqual(attr.intValue, 1345531954)
            case 16: XCTAssertEqual(attr.intValue, 862757097)
            case 15: XCTAssertEqual(attr.intValue, 78007333978675)
            case 19: XCTAssertEqual(attr.stringValue, "10.0.3")
            case 3: XCTAssertEqual(attr.stringValue, "10.4.11")
            case 0: XCTAssertEqual(attr.stringValue, "Production")
            case 4: XCTAssertEqual(attr.data.hexEncodedString(uppercase: true, separator: " "),
                                   "B3 07 05 98 ED 79 AA E1 E4 A1 94 63 FC BD 04 68")
            case 5: XCTAssertEqual(attr.data.hexEncodedString(uppercase: true, separator: " "),
                                   "0C C1 6E E9 BC 38 1F F4 1C 44 EB 56 B2 80 7A 84 38 2E 50 97")
            case 8: XCTAssertEqual(attr.stringValue, "2024-03-26T00:04:13Z")
            case 12: XCTAssertEqual(attr.stringValue, "2024-03-26T00:04:13Z")
            case 18: XCTAssertEqual(attr.stringValue, "2015-03-10T16:37:56Z")
            case 2: XCTAssertEqual(attr.stringValue, "com.apple.garageband10")
            case 7: XCTAssertEqual(attr.data.hexEncodedString(uppercase: true, separator: " "),
                                   "A5 EA FF 44 6F 55 B7 BF 6C 24 F0 68 64 CA 58 B7 6C FA 42 2F 6A 22 1C 9A DD FB EA 9F DD A4 9C A6 5B 27 4B 4A D2 0C 66 52 B0 43 76 9B E0")
            case 6: XCTAssertEqual(attr.data.hexEncodedString(uppercase: true, separator: " "),
                                   "95 87 7F 7D 40 17 21 0B 04 E4 C0 17 5C 4E 3B 8B FD F5 6B B0 10 93 9D D2 C1 8F 7A 20 0C 14 52 44 E3 95 39 F9 9D AF 3A 59 79 80 20 D3 F5 9E D9 CD 01 A3 4C EC B6 1A 76 A5")

            default:
                XCTFail("Unhandled type \(attr.type)")
            }
            
        }
        
        XCTAssertEqual(receipt.bundleId, "com.apple.garageband10")
        XCTAssertEqual(receipt.applicationVersion, "10.4.11")
        XCTAssertEqual(receipt.originalApplicationVersion, "10.0.3")
        
        let dateComp = DateComponents(calendar: .current,
                                      timeZone: TimeZone(secondsFromGMT: 0),
                                      year: 2024,
                                      month: 3,
                                      day: 26,
                                      minute: 4,
                                      second: 13)

        XCTAssertEqual(receipt.receiptCreationDate, dateComp.date)
        XCTAssertNil(receipt.expirationDate)

        XCTAssertEqual(pkcs7.certificates.count, 3)
        
        XCTAssertEqual(pkcs7.signerInfo.count, 1)
        
        let signerInfo = pkcs7.signerInfo[0]
        
        XCTAssertEqual(signerInfo.issuer.description,
                       "CN=Apple Worldwide Developer Relations Certification Authority, OU=G5, O=Apple Inc., C=US")
        
        
    }
    
    func testDecodeExampleWith1IAP() throws {
        
        // From https://stackoverflow.com/a/53286406/861465
        
        let b64Example = "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"
        
        
        let receiptData = Data(base64Encoded: b64Example)!
        
        let decoder = DERDecoder()
        let pkcs7 = try decoder.decode(PKCS7Container.self, from: receiptData)
        
        
        XCTAssertEqual(pkcs7.data.count, 838)
        
        let receipt = try XCTUnwrap(pkcs7.getContent(as: AppReceipt.self))

        XCTAssertEqual(receipt.bundleId, "com.belive.app.ios")
        XCTAssertEqual(receipt.applicationVersion, "3")
        XCTAssertEqual(receipt.originalApplicationVersion, "1.0")

    }
    
    func testDecodeMultipleTransactions() throws {
        
        // From https://stackoverflow.com/a/33961925/861465
        
        let b64Example = ""
        
        
        let receiptData = Data(base64Encoded: b64Example)!
        
        let decoder = DERDecoder()
        let pkcs7 = try decoder.decode(PKCS7Container.self, from: receiptData)
        
        
        XCTAssertEqual(pkcs7.data.count, 3046)
        
        let receipt = try XCTUnwrap(pkcs7.getContent(as: AppReceipt.self))

        XCTAssertEqual(receipt.bundleId, "com.mbaasy.ios.demo")
        XCTAssertEqual(receipt.applicationVersion, "1")
        XCTAssertEqual(receipt.originalApplicationVersion, "1.0")
        
        
        XCTAssertEqual(receipt.inAppPurchaseReceipts.count, 7)
        
        for (i, iapReceipt) in receipt.inAppPurchaseReceipts.enumerated() {
            XCTAssertGreaterThan(iapReceipt.quantity, 0)
            XCTAssertNotNil(iapReceipt.productId)
            
            if i == 0 {
                XCTAssertEqual(iapReceipt.productId, "consumable")
            } else {
                XCTAssertEqual(iapReceipt.productId, "monthly")
            }
   
        }
        
    }


    func testVerifyGarageBandReceipt() throws {
        
        let receiptPath = Bundle.module.path(forResource: "gb_receipt", ofType: "der")!
        let receiptURL = URL(fileURLWithPath: receiptPath)
        
        
        let validator = try AppReceiptValidator(receiptURL: receiptURL,
                                                bundleIdentifier: "com.apple.garageband10",
                                                appVersion: "10.4.11"
        )
        
        let deviceHash = try validator.computeDeviceHash()
        if deviceHash.hexEncodedString() != "0cc16ee9bc381ff41c44eb56b2807a84382e5097" {
            validator.receipt.sha1Digest = deviceHash
        }
        
        try validator.validate()

        
    }

    func testVerifyQTHSandboxRecipt() throws {
        
        
        let receiptPath = Bundle.module.path(forResource: "qth_sandbox_receipt", ofType: "der")!
        let receiptURL = URL(fileURLWithPath: receiptPath)
        
        
        let validator = try AppReceiptValidator(receiptURL: receiptURL,
                                                bundleIdentifier: "com.w8wjb.QTH",
                                                appVersion: "1.0.0"
                                                )
        
        // This cert is signed by the sandbox, not the real app store
        validator.appleRootCert = validator.container.certificates.last

        try validator.validate()
    }
    
    
}
